Zero Knowledge Proof based authentication 
protocol using graph isomorphism 

Lavish Saluja  
Department of Electrical and 
Electronics Engineering 
Birla Institute of Technology and 
Science, Pilani - Pilani 
Pilani, India 
lavishsaluja.ls@gmail.com 

Ashutosh Bhatia  
Department of Computer Science and 
Information Systems 
Birla Institute of Technology and 
Science, Pilani - Pilani 
Pilani, India 
ashutosh.bhatia@pilani.bits-pilani.ac.in 

Zero-Knowledge Proof according to the Wikipedia 
definition1 is a method by which one party (the prover) can 
prove to the other party (the verifier) that they know a value 
x, without revealing any other information than the fact that 
they know the value x.  
      Now we are going to apply the same concept while 
authenticating users by not revealing their passwords to the 
server (the verifier) and still be able to prove that the client 
has the password. 
      In the ZKP protocol, the verifier can’t learn anything 
from the authentication process. The prover can’t cheat on 
the verifier to be someone else because of repeated 
challenge response action and the verifier can’t pretend to 
be prover to a third party because the verifier will always 
have only one value which will always be insufficient to 
find or calculate the prover’s secret. 
      We discuss different approaches/problems to implement 
zero-knowledge proof. Each of them will have different 
complexities, use different data structures and hence have 
unique properties. 

ABSTRACT: 

We live in an era of information and it is very important to 
handle the exchange of information. While sending data to an 
authorized source, we need to protect it from unauthorized sources, 
changes, and authentication. ZKP technique can be used in 
designing secure authentication systems which don’t involve any 
direct exchange of information between the claimant and the 
verifier thus preventing any possible leak of personal information. 

We propose a Zero-Knowledge Proof (ZKP) algorithm based 
on isomorphic graphs. We suggest most of the computations 
should be carried out on user’s web browser without revealing the 
password to the server at any point of time. Instead, it will generate 
random graphs and their permutations based on the login ID and 
password. 

Keywords 
Zero-Knowledge Proof, Graph Isomorphism, Password,  

I. INTRODUCTION: 

Each time an application provides authentication, some 
data (password and login) are sent from the client to the 
servers through HTTP (in most cases), though for security 
reasons they are not stored in plain text form and given to the 
servers in a readable form. For commercial software, 
developers use public key cryptographic protocols such as 
HTTPS. It sets up secure communication between the client 
and server but the login and password details are still sent.  
 The motivation for this research is to design, develop and 
implement a fast authentication model using zero-knowledge 
proof to provide added security.  
PAPER OVERVIEW: 
Zero-Knowledge Proof is explained in Section II. In 
Section III, we explain the authentication process and in 
Section IV, we describe the protocol and discuss the various 
private key algorithm in Section V. We discuss the possible 
attacks in Section VI. We review the related work in this 
area in Section VII. We conclude the paper in Section VIII. 

II. ZERO-KNOWLEDGE PROOF: 

Canonical interactive proof systems have two parties: a 
prover and a verifier. [1] 

1 

 
 
 
 
  
 
  
 
 
 
 
 
 
 
    
calculate many multiplication inverses but it requires more 
scalar multiplications with affine coordinates. We’ll skip 
going into much details over ECC here though since it’s out 
of the scope of this paper but there has been quite an 
extensive research over it.  

GRAPH IS

2 

 
 
 
 
We are using the secure hash algorithm (SHA-1) 
which is supposed to need 280 operations for a 
phishing attack which was later brought down to 
263 operations as presented in August 2005 attack. 

2. Secure communication: 
We are assuming that the communication between 
user and her browser is completely secure and thus 
there are no vulnerabilities, cross site scripting, any 
malicious software, etc. 

3. Dictionary Attacks: 
Florencio[8] conducted a research about password 
habits. Such kind of attacks happen because of 
poor password choice by the users which are easily 
guessable or are reused at many websites.[11] 
Now, If the user’s and server’s communication is 
encrypted the only way to attack is to run a 
dictionary which can be slowed down and detected 
as proved already using captchas. 
A new protocol was developed to counter online 
dictionary attacks which suggested using account 
locking, 
delayed 
response, 
use 
of 
CAPTCHA.[12][13] 

4. NP Problem: 
Efficient algorithms for some classic graphs were 
proposed for determining 
if 
two graphs are 
isomorphic. However, in our approach the main 
focus is to find the permutation π and not to prove 
if two graphs are isomorphic. The generated graphs 
are completely random and none of the proposed 
algorithms can be used to find out the secret. 

VII. RELATED WORK: 

      I came across NORWAHL, a research output by Ryan 
Cheu, MIT. They developed and deployed a zero knowledge 
proof based authentication system and used discrete 
logarithms as their main problem to be used in challenge 
response action. 
      Yahoo![9] proposed a simple challenge response 
solution a long ago, which was very similar to HTTP 
Digest. Because of major possibilities of servers 
to 
impersonate user even after hashing password, this was 
labelled as quite insecure. 
      Encrypted Key exchange [7] (EKE) was introduced in 
1992, which 
takes both asymmetric and symmetric 
cryptographic results. It uses one modulo function.  
      Secure Remote password (SRP) was developed in 1997 
whose security was directly proportional to the security of 
applied one way hashing 
function. 
It was quite 
computationally expensive because eit uses two modulo 
functions. It was quite vulnerable to dictionary attacks. 

VIII.  CONCLUSION AND FUTURE WORK: 

      We discussed and presented a novice way of 
authenticating users in the web by using graph isomorphism 
based Zero-Knowledge Proof protocols that is sound, 

3 

Figure 2: ZKP Implementation on the web 

Classical 
                   -- 
                   -- 
Send login, password 
                   -- 
Receive 
and 
show 
authentication response.  

an 

Zero Knowledge Proof 
Generate private key 
Generate challenging graphs 
Send login, graphs 
Responds to challenges. 
Receive 
and 
show 
authentication  response 

Table 1: Compares the work of browser in classical 
and ZKP based authentication systems in web. 

V. PRIVATE KEY ALGORITHM: 

The private key here is the permutation π that the 
browser generates on the basis of login and password 
details. We are using one way functions over standard 
secure hashing algorithms (SHA)9 to generate corresponding 
permutations to the password. A hash function 10 is a 
mathematical operation which maps data of any size 
(password in our case) to a bit string of fixed size. As stated 
by OWASP, hash functions have the following properties: 

1. 

2. 

It’s easy and practical to compute the hash but it’s 
impossible to regenerate the only input with the 
hash value. 
It’s very difficult to design an input to match a 
desired output. 

VI. POSSIBLE ATTACKS: 

The implementation can be done in a few ways, either as a 
browser’s extension, as a script or as a third party website. If 
the server can’t be trusted scripting gives no benefit and 
developing an extension would be beneficial but will require 
more efforts from users. We have assumed there is no 
phishing like sign-in-seal. [2] 
Attacks on the approach include our dependence on 
different algorithms and functions used like: 

1. SHA-1:  

9 Secure hash algorithm 
10 Hashing passwords - one way to security 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
                                                        
 
 
 
 
       
 
complete and give zero knowledge to the server regarding 
user’s password. 
      We discussed how the ZKP based authentication 
protocols give non trivial benefits over the classical 
approaches. 
      We also discussed about the computations that should be 
done on user’s browser in order to improve the accuracy and 
the complexity of the process.  

      We plan to work more on the implementation and use 
JavaScript to implement the client side extension and use 
asynchronous web 
technologies 
along with graph 
isomorphism which would be implemented using the 
popular nauty package. The next stepts would be enabling 
easy, reusable system. 
      Further we could also implement one of the protocols 
that secures against the targeted attack described above in 
Section VI. The weakness aside, the GIZKP still stands out 
as an effective authentication system.  

IX. REFERENCES: 

[1] 

4 

 
 
       
 
