Certain Answers to a sparql Query over a
Knowledge Base (extended version)

Julien Corman1 and Guohui Xiao1

Free University of Bozen-Bolzano, Bolzano, Italy

Abstract. Ontology-Mediated Query Answering (OMQA) is a well-
established framework to answer queries over an rdfs or owl Knowl-
edge Base (KB). OMQA was originally designed for unions of conjunctive
queries (UCQs), and based on certain answers. More recently, OMQA
has been extended to sparql queries, but to our knowledge, none of the
eﬀorts made in this direction (either in the literature, or the so-called
sparql entailment regimes ) is able to capture both certain answers for
UCQs and the standard interpretation of sparql over a plain graph. We
formalize these as requirements to be met by any semantics aiming at
conciliating certain answers and sparql answers, and deﬁne three ad-
ditional requirements, which generalize to KBs some basic properties of
sparql answers. Then we show that a semantics can be deﬁned that
satisﬁes all requirements for sparql queries with SELECT, UNION, and
OPTIONAL, and for DLs with the canonical model property. We also in-
vestigate combined complexity for query answering under such a seman-
tics over DL-Lite R KBs. In particular, we show for diﬀerent fragments
of sparql that known upper-bounds for query answering over a plain
graph are matched.

1 Introduction

sparql is an expressive SQL-like query language designed for Semantic Web
data, exposed as rdf graphs. Recently, sparql has been extended with so-called
entailment regimes, which specify diﬀerent semantics to query an rdfs or owl
Know ledge Base (KB), i.e. data enriched with a background theory. This allows
retrieving answers to a query not only over the facts explicitly stated in the KB,
but more generally over what can be inferred from the KB.
The sparql entailment regimes are in turn largely inﬂuenced by theoretical
work on Ontology Mediated Query Answering (OMQA), notably in the ﬁeld of
Description Logics (DLs). However, OMQA was initially developed for unions of
conjunctive queries (UCQs), which have a limited expressivity when compared to
sparql. It turns out that conciliating the standard (compositional) semantics of
sparql on the one hand, and the semantics used for OMQA on the other hand,
called certain answers, is non-trivial.
As an illustration, Example 1 provides a simple KB and sparql query. The

dataset (a.k.a ABox ) A states that Alice is a driver, whereas the background theory
(a.k.a. TBox ) T states that a driver must have a license (for conciseness, we use DLs
for the TBox, rather than some concrete syntax of owl). Finally, the sparql query q
retrieves all individuals that have a license.

9
1
0
2

v
o

N

1
2

]

B

D

.

s

c

[

3
v
8
6
6
2
0

.

1
1
9
1

:

v

i

X

r

a

 
 
 
 
 
 
2

Julien Corman, Guohui Xiao

Example 1.

A = {Driver(Alice)}
T = {Driver ⊑ ∃hasLicense}
q = SELECT ?x WHERE { ?x hasLicense ?y }

Intuitively, one expects Alice to be retrieved as an answer to q . And it would indeed
be the case under certain answer semantics, if one considers the natural translation of
this query into a UCQ. On the other hand, under the standard semantics of sparql
1.1 [8], this query has no answer. This is expected, since the fact that Alice has a
driving license is not present in the ABox. More surprisingly though, under all sparql
entailment regimes [6], this query also has no answer.
This mismatch between certain answers and entailment regimes has already been
discussed in depth in [1], where the interpretation of the OPTIONAL operator of sparql
is identiﬁed as a challenge, when trying to deﬁne a suitable semantics for sparql that
complies with certain answers for UCQs. A concrete proposal is also made in [1] in this
direction. Unfortunately, this semantics does not comply with the standard semantics
of sparql when the TBox is empty. This means that a same query over a plain rdf
graph may yield diﬀerent answers, depending on whether it is evaluated under this
semantics, or under the one deﬁned in the sparql 1.1 speciﬁcation [8].
We propose in this article to investigate whether and how this dilemma can be
solved, for the so-called set semantics of sparql and certain answers. To this end, we
ﬁrst formulate in Section 4 some requirements to be met by any reasonable semantics
meant to conciliate certain answers and standard sparql answers. Then in Section 5, we
use these requirements to review diﬀerent semantics. We also show that all requirements
can be satisﬁed, for the fragment of sparql with SELECT, UNION and OPTIONAL, and for
KBs that admit a unique canonical model. Finally, in Section 6, we provide combined
complexity results for query answering under this semantics, over KBs in DL-Lite R ,
one of the most popular DLs tailored for query answering, which correspond to the
owl 2 ql standard. We show in particular that upper bounds for this problem match
results already known to hold for sparql over plain graphs, which means that under
this semantics, and as far as worst-case complexity is concerned, the presence of a
TBox does not introduce a computational overhead. Before this, Section 2 introduces
preliminary notions, and Section 3 reviews existing semantics for sparql over a KB.
Proofs can be found in apppendix.

2 Preliminaries

We assume countably inﬁnite and mutually disjoint sets NI , NC , NR , and NV of indi-
viduals (constants), concept names (unary predicates), role names (binary predicates),
and variables respectively. We also assume a countably inﬁnite universe U, such that
NI ⊆ U. For clarity, we abstract away from concrete domains (as well as rdf term
types), since these are irrelevant to the content of this paper. We also assume that NI ,
NC and NR do not contain any reserved term from the rdf/rdfs/owl vocabularies

(such as rdfs:subClassOf, owl:disjointWith, etc.)

2.1 rdf and sparql

An (rdf) triple is an element of (NI × {rdf:type} × NC ) ∪ (NI × NR × NI ). An rdf graph

A is a set of triples. For the concrete syntax of sparql, we refer to the speciﬁcation [8].
Following [1], we focus on sparql queries whose triple patterns are either in (NV ∪

NI ) × {rdf:type} × NC , or in (NV ∪ NI ) × NR × (NV ∪ NI ). For readability, we represent

Certain Answers to a sparql Query over a Knowledge Base

3

triples and triple patterns as atoms in preﬁx notation, i.e. we use A(t) rather than

(t, rdf:type, A) and for r ∈ NR , we use r(t1 , t2 ) rather than (t1 , r, t2 ). If q is a sparql

query, we use vars(q) to denote the set of variables pro jected by q .
We adopt (roughly) the abstract syntax provided in [14] for the fragment of sparql
with the SELECT, UNION and OPTIONAL operators, using the following grammar, where
t is a sparql triple pattern, and X ⊆ NV :

q

::= t | selectX q | q union q | q join q | q opt q

In addition, if q = selectX q ′ , then X ⊆ vars(q ′ ) must hold. In order to refer to
fragments of this language, we use the letters S, U, J and O (in this order), for select,
union, join, and opt respectively. E.g. “SUJO” stands for the full language, “UJ” for
the fragment with union and join only, etc.
If ω is a function, we use dom(ω ) (resp. range(ω )) to designate its domain (resp.
range). Two functions ω1 and ω2 are compatible, denoted with ω1 ∼ ω2 , iﬀ ω1 (x) =

ω2 (x) for each x ∈ dom(ω1 )

4

Julien Corman, Guohui Xiao

The semantics of DL KBs is deﬁned in terms of (ﬁrst-order) interpretations. We
adopt in this article the standard name assumption : an interpretation is a structure I =
h∆I , ·I i, where the domain ∆I of I is a non-empty subset of U, and the interpretation
function ·I of I maps each c ∈ NI to itself, and each A ∈ NC (resp. r ∈ NR ) to a unary
(resp, binary) relation AI (resp. rI ) over ∆I . An interpretation I is a model of a KB
K = hT , Ai if it satisﬁes every assertion in A and axiom in T . For the formal deﬁnition
of “satisﬁes”, we refer to [4].
If K is a KB, we use mod(K) to denote the set of models of K. We focus on satisﬁable
KBs only, i.e. KBs that admit at least one model, since any formula can be trivially
derived from an unsatisﬁable KB. We also omit this precision for readability. So “any
KB” below is a shortcut for “any satisﬁable KB”.
For a DL KB K, an interpretation Ic ∈ mod(K) is a canonical model of K if Ic can
be homomorphically mapped to any I ∈ mod(K). We say that a DL L has the canonical
model property if every KB in L has a unique canonical model up to isomorphism. This
is a key property of DLs tailored for query answering, and many DLs, e.g. DL-LiteR ,
E L or Horn-S HIQ, have this property.
An interpretation (or an ABox) can also be viewed as a (possibly inﬁnite) rdf

graph, with triples {A(d) | d ∈ AI , A ∈ NC } ∪ {r(d1 , d2 ) | (d1 , d2 ) ∈ rI , r ∈ NR }.

This is a slight abuse (the rdf standard does not admit inﬁnite graphs), but we will
nonetheless use this convention throughout the article, in order to simplify notation.
A conjunctive query (CQ) h is a expression of the form:

h(x) ← p1 (x1 ), . . . , pm (xm )

where h, pi are predicates and x, xi are tuple over NV . Abusing notation, we may use x
(resp. xi ) below to designate the elements of x (resp. xi ) viewed as a set. An additional
syntactic requirement on a CQ is that x ⊆ x1 ∪ .. ∪ xm . The variables in x are called
distinguished, and we use vars(h) to designate the distinguished variables of CQ h. We
focus in this article on CQs where each pi is unary or binary, i.e. pi ∈ NC ∪ NR . A match
for h in an interpretation I is a total function ρ from x1 ∪ . . . ∪ xm to ∆I such that
ρ(xi) ∈ (pi )I for i ∈ {1..m}. A mapping ω is an answer to h over I iﬀ there is a match

ρ for h in I s.t. ω = ρ|vars(h) .

A union of conjunctive queries (UCQ) is a set q = {h1 , . . . , hn } of CQs sharing the
same distinguished variables, and ω is an answer to q over I iﬀ ω is an answer to some

hi over I . Finally, ω is a certain answer to q over a KB K iﬀ range(ω ) ⊆ aDom(K) and

ω is an answer to q over each I ∈ mod(K). We use certAns(q , K) to designate the set
of certain answers to q over K.
CQs and UCQs have a straightforward representation as sparql queries. The CQ

h(x) ← p1 (x1 ), . . . , pm (xm ) in sparql syntax is written:

selectx (p1 (x1 ) join .. join pm (xm ))

And a UCQ in sparql syntax is of the form:

h1 union .. union hn

where each hi is a CQ in sparql syntax, and vars(hi ) = vars(hj ) for i, j ∈ {1..n}.

Certain Answers to a sparql Query over a Knowledge Base

5

3 Querying a DL KB with sparql: Existing Semantics

In this section, we review existing semantics for sparql over a DL KB. We start by
brieﬂy recalling some features of the W3C speciﬁcation for the sparql 1.1 entailment
regimes [6]. This speciﬁcation deﬁnes diﬀerent ways to take into account the semantics
of rdf, rdfs or owl, in order to infer additional answers to a sparql query. We ignore
the aspects pertaining to querying blank nodes and concept/role names, which fall out
of the scope of this paper, and focus on the entailment regimes parameterized by an
owl proﬁle, i.e. a DL L. In short, the L-entailment regime modiﬁes the evaluation of
a sparql query q over an L-KB K = hT , Ai as follows:

1. Triple patterns are not evaluated over the ABox A, but instead over the so-called
entailed graph, which consists of all ABox assertions entailed by K. This includes
assertions of the form C (a), where C is a complex concept expression allowed in
L. The semantics of other sparql operators is preserved.
2. The sparql query can use L-concepts in triple pattern, e.g. ∃hasLicense(x) .

Consider again Example 1. under the owl 2 QL entailment regime for instance, which
corresponds (roughly) to the DL DL-Lite R . In this example, the query ∃hasLicense(x)
has {x 7→ Alice} as unique answer: since the entailed graph contains all ABox asser-
tions entailed by K, it contains the assertion ∃hasLicense(Alice) (again, we use the
DL syntax rather than owl, for readability).
So the expressivity of the L-entailment regime is limited by the concepts that can
be expressed in L. This is why [10] proposed to extend the semantics of the owl 2 QL
proﬁle, retrieving instances of concepts that cannot be expressed in DL-Lite R (e.g. con-
cepts of the form ∃r1 .∃r2 ). Still, under this semantics as well as all entailment regimes
deﬁned in the speciﬁcation, the query select{x} hasLicense(x, y ) has no answer over
the KB of Example 1, because the entailed graph does not contain any assertion of the

form hasLicense(Alice, e).

This point was discussed in depth in [1], for the SUJO fragment, and based on
remarks made earlier in [2]. The current paper essentially builds upon this discussion,
which is why we reproduce it below. A ﬁrst remark made in [2] and [1] is that the opt
operator of sparql prevents the usage of certain answers, even when querying a plain
graph (or equivalently, a KB with empty TBox). This can be seen with Example 2.

Example 2.

A = {Person(Alice)}
q = Person(x) opt hasLicense(x, y )

In this example, according to the sparql speciﬁcation, the mapping ω = {x 7→
Alice} is the only answer to q over A, i.e. sparqlAns(q , A) = {ω}. But ω is not
a certain answer to q over the KB h∅, Ai. Consider for instance the interpreta-

tion I deﬁned by I = A ∪ {hasLicense(Alice, 12345)}. Then sparqlAns(q , I ) =
{{x 7→ Alice, y 7→ 12345}} . So ω 6∈ certAns(q , h∅, Ai).

Then in [2] and [1] still, the authors remark that in this example, ω can nonetheless
be extended to an answer in every model of h∅, Ai. This is the main intuition used in [1]
to adapt the deﬁnition of certain answers to sparql queries with opt. If q is a query
and I an interpretation, let eAns(q , I ) designate all mappings that can be extended to
an answer to q in I , i.e.:

eAns(q , I ) = {ω | ω (cid:22) ω ′ for some ω ′ ∈ sparqlAns(q , I )}

6

Julien Corman, Guohui Xiao

Then if K is a KB, the set eCertAns(q , K) of mappings that can be extended to an
answer in every model of K is deﬁned as:

eCertAns(q , K) =

Certain Answers to a sparql Query over a Knowledge Base

7

as properties to met by any semantics whose purpose is to conciliate certain answers
and sparql answers. We also deﬁne three additional requirements (called opt exten-
sion, variable binding and binding provenance ), which generalizes to KBs some basic
properties of sparql answers over plain graphs. We note that these requirements apply
to arbitrary DLs, whereas Section 5 focuses instead on speciﬁc families of DLs.
If q is a sparql query and K a KB, we use ans(q , K) below to denote the answers
to q over K under some (underspeciﬁed) semantics. This allows us to deﬁne properties
to be met by such a semantics.
Requirement 1 states that ans(q , K) should coincide with certain answers for UCQs.

Requirement 1 (Certain answer compliance). For any UCQ q and KB K,

ans(q , K) = certAns(q , K)

Requirement 2 corresponds to the limitation of [1] identiﬁed in Section 3. It requires
that ans(q , h∅, Ai) coincide with answers over A, as deﬁned in the sparql speciﬁcation.

Requirement 2 (sparql answer compliance). For any query q and ABox A,

ans(q , h∅, Ai) = sparqlAns(q , A)

As will be seen in the next section, it is possible to deﬁne semantics that verify
Requirements 1 and 2, but fail to comply with basic properties of sparql answers over
a plain graph. This is why we deﬁne additional requirements.
First, as observed in [11] for instance, the opt operator of sparql was introduced
to “not reject the solutions because some part of the query pattern does not match” [8].
Or in other words, for each answer ω to the left operand of an opt, either ω or some
extension of ω is expected be present in the answers to the whole expression. Let
(cid:22)g be the partial order over sets of solution mappings deﬁned by Ω1 (cid:22)g Ω2 iﬀ, for
each ω1 ∈ Ω1 , there is a ω2 ∈ Ω2 s.t. ω1 (cid:22) ω2 . Then this property is expressed with
Requirement 3.

Requirement 3 (opt extension). For any queries q1 , q2 and KB K:

ans(q1 , K) (cid:22)g ans(q1 opt q2 , K)

Another important property of sparql answers over plain graphs pertains to bound
variables. Indeed, a sparql query q (with union and/or opt) may allow partial solution
mappings, i.e. whose domain does not cover all variables pro jected by q . For instance, in
Example 2, ω = {x 7→ Alice} ∈ sparqlAns(q , A), even though the variables pro jected
by q are x and y . In such a case, we say that variable x is bound by ω , whereas
variable y is not. Then a sparql query may only admit answers that bind certain sets
of variables. For instance the query A(x) opt (R(x, y ) join R(y , z )) admits answers
that bind either {x} or {x, y , z}. But it does not admit answers that bind another
set of variables ({y},{x, y}, etc.). So a natural requirement when generalizing sparql
answers to KBs is to respect such constraints. We say that a set X of variables is
admissible for a query q iﬀ there exists a graph A and solution mapping ω s.t. ω ∈
sparqlAns(q , A) and dom(ω ) = X . Unfortunately, for queries with OPTIONAL, whether
a given set of variables is admissible for a given query is undecidable. So we adopt
instead a relaxed notion of admissible bindings. For a SUJO query q , we use adm(q) to
denote the family of sets of variables deﬁned inductively as follows:

8

Julien Corman, Guohui Xiao

Deﬁnition 2 (Deﬁnition of adm(q) for the SUJO fragment).

If q is a triple pattern, then adm(q) = {vars(q)}

adm(selectX q) = { X ′

Certain Answers to a sparql Query over a Knowledge Base

9

Semantics

Fragment

req1 req2 req3 req4 req5

Ahmeta j et al.([1])
pwdPT (⊆ SJO) X
Entailment regime (Def 3) UJO
SJ / SUJO
O / SUJO
SUJO
SUJO

Canonical (Def 4)
Restricted (Def 5)
Max. adm. can. (Def 8)

X

X

x

X

X

x

X

X

X

X

X

?

X

X

x

X

X

X

X

X

X

x

X

X

X

X

X

x

X

Table 1: Requirements met by alternative semantics for sparql over a DL KB
(with the canonical model property). “A/B” stands for all fragments between A
and B.

5.1 sparql Entailment Regimes

Example 2 above showed that certain answer to a query with opt may fail to com-
ply with the standard compositional semantics of sparql (Deﬁnition 1) over a plain
graph (i.e. when the TBox is empty). Then a natural attempt to conciliate the two
is to proceed “the other way around”: stick to the compositional semantics of sparql,
and use certain answers for the base case only. This is in essence what the sparql
entailment regimes propose for queries that correspond to the SUJO fragment (recall
the restrictions on reserved rdf/rdfs/owl keywords in triple patterns expressed in
Section 2).
Because the speciﬁcation of sparql entailment regimes [6] is too low-level for the
scope of this paper, we provide a more abstract characterization of this approach for
the SUJO fragment. If q is a query and K a KB, we call the resulting set of solution
mapping the entailment regime answers to q over K, denoted with eRAns(q , K), deﬁned
as follows:

Deﬁnition 3 (Entailment Regime Answers).

If q is a triple pattern, then eRAns(q , K) = certAns(q , K)

eRAns(q1 union q2 , K) = eRAns(q1 , K) ∪ eRAns(q2 , K)
eRAns(q1 join q2 , K)
= eRAns(q1 , K) ⊲⊳ eRAns(q2 , K)
eRAns(q1 opt q2 , K)
= (eRAns(q1 , K) ⊲⊳ eRAns(q2 , K)) ∪
(eRAns(q1 , K) \ eRAns(q2 , K))
eRAns(selectX q , K) = πX eRAns(q , K)

It is immediate to see that entailment regime answers and sparql answers coin-
cide over a plain graph. Indeed, in the base case (i.e. when q is a triple pattern), for
any graph A, sparqlAns(q , A) = certAns(q , h∅, Ai). Then the inductive deﬁnitions of
sparqlAns(q , A) (Deﬁnition 1) and eRAns(q , K) (Deﬁnition 3) coincide. So entailment
regime answers satisfy Requirement 2.
But they fail to comply with certain answers for UCQs (Requirement 1), for two
reasons. First, the union operator is not compositional for certain answers in some
DLs. Consider for instance Example 4 below:

Example 4.

A = {Driver(Alice)}
T = {Driver ⊑ CarDriver ⊔ TruckDriver}
q = CarDriver(x) union TruckDriver(x)

Then certAns(q , hT , Ai) = {{x 7→ Alice}}, but eRAns(q , hT , Ai) = ∅.

10

Julien Corman, Guohui Xiao

Second, the select operator is not compositional for certain answers, even for some
DLs that have the canonical model property. Consider for instance Example 5 below:

Example 5.

A = {Driver(Alice)}
T = {Driver ⊑ ∃hasLicense}
q = select{x} (Driver(x) join hasLicense(x, y ))

Then certAns(q , hT , Ai) = {{x 7→ Alice}}, but eRAns(q , hT , Ai) = ∅.

So entailment regime answers fail to satisfy Requirement 1 for the U and SJ frag-
ments already.

5.2 Canonical Answers

We now focus on DLs with the canonical model property. We assume some underspec-
iﬁed DL Lcan with the canonical model property, and use “an Lcan KB” to refer to a KB
in such DL. Then if K is an Lcan KB, we use can(K) to designate its canonical model
(up to isomorphism).
An equivalent deﬁnition of certain answers for DLs with the canonical model prop-
erty is the following: certain answers to a UCQ q over a KB K coincide with answers to
q over can(K), restricted to those that range over aDom(K). We show that extending
this deﬁnition to queries with opt is suﬃcient to satisfy Requirements 2 (in addition
to Requirement 1), but fails to satisfy Requirement 3.
If Ω is a set of solution mappings and B ⊆ NI , let Ω ⊲ B = {ω ∈ Ω | range(ω ) ⊆ B }.
Then we deﬁne the canonical answers to a query q over an Lcan KB K, denoted with
canAns(q , K), as follows:

Deﬁnition 4 (Canonical Answers). For any SUJO query q and Lcan KB K:

canAns(q , K) = sparqlAns(q , can(K)) ⊲ aDom(K)

Proposition 1 states that canonical answers comply with sparql answers over a
plain graph (Requirement 2).

Proposition 1. For any SUJO query q and Lcan KB K, canAns(q , K) satisﬁes Re-
quirement 2.

From the observation made above, canonical answers also comply with certain
answers for UCQs (Requirement 1). But they fail to satisfy opt extension (Require-
ment 3), as illustrated with Example 6.

Example 6.

A = {Driver(Alice)}
T = {Driver ⊑ ∃hasLicense}
q = Driver(x) opt hasLicense(x, y )

In this example, Let K = hT , Ai. Then canAns(Driver(x), K) = {{x 7→ Alice}}.
However, sparqlAns(q , can(K)) = {{x 7→ Alice, y 7→ e}}, for some e 6∈ aDom(K). There-

fore canAns(q , K) = sparqlAns(q , can(K)) ⊲ aDom(K) = ∅. So canAns(Driver(x), K) 6(cid:22)g

canAns(q , K), which immediately violates Requirement 3.

Certain Answers to a sparql Query over a Knowledge Base

11

5.3 Maximal Admissible Canonical Answers

The canonical answers deﬁned in the previous section fail to satisfy Requirement 3.
We show how this deﬁnition can be adapted to satisfy all requirements, for the whole
SUJO fragment.
Intuitively,
in Deﬁnition 4, the restriction of sparqlAns(q , can(K)) to solution
mappings that range over can(K) is too strong. Consider again Example 6, where

sparqlAns(q , can(K)) = {{x 7→ Alice, y 7→ e}}. In this example, rather than ﬁlter-

ing out this solution mapping (because it does not range over aDom(K)), one would
want instead to restrict it to the active domain, which yields the desired mapping

{x 7→ Alice}.

To formalize this intuition, if Ω is a set of solution mappings and B ⊆ NI , let

Ω ◮ B = {ωkB | ω ∈ Ω}. We can now deﬁne the restricted canonical answers

restCanAns(q , K) to a query q over an Lcan KB K, as follows:

Deﬁnition 5 (Restricted Canonical Answers). For any SUJO query q and Lcan
KB K:

restCanAns(q , K) = sparqlAns(q , can(K)) ◮ aDom(K)

However, restricted canonical answers still fail to satisfy the above requirement on
admissible variable bindings (Requirement 4), as illustrated with Example 7 below:

Example 7.

A = {Teacher(Alice)}
T = {Teacher ⊑ ∃teachesTo, teachesTo ⊑ hasTeacher− }
q = Teacher(x) opt (teachesTo(x, y ) join hasTeacher(y , z ))

In this example, sparqlAns(q , can(K)) = {{x 7→ Alice, y 7→ e, z 7→ Alice}}, for

some e 6∈ aDom(K). So restricting this solution mapping to aDom(K) would yield the
mapping {x 7→ Alice, z 7→ Alice}. However, {x, z} is not an admissible set of variables
for q , because q requires that whenever variable z is bound, variable y must be bound
as well.
We now propose to further constrain restricted canonical answers in order to satisfy
Requirements 4 and 5. We call the resulting solution mappings maximal admissible

canonical answers, noted mCanAns(q , K).

We start with the PJO fragment (i.e. queries without union) for simplicity, since for
this fragment, Requirement 5 is trivially satisﬁed. If S is a family of sets, let max⊆ (S )
designate the set of maximal elements of S w.r.t. set inclusion. And if Ω is a set of
solution mappings and X a family of sets of variables, let:

Ω ⊗ X = {ω |X | ω ∈ Ω , X ∈ max⊆ (

12

Julien Corman, Guohui Xiao

Deﬁnition 7 (Branches of a SUJO query q).

If q is a triple pattern, then branch(q) = {q}

branch(selectX q) = { selectX q ′
1 join q ′
1 opt q ′

| q ′ ∈ branch(q) }
branch(q1 join q2 )
1 , q ′
2 ) ∈ branch(q1 ) × branch(q2 ) }
branch(q1 opt q2 )
1 , q ′
2 ) ∈ branch(q1 ) × branch(q2 ) }
branch(q1 union q2 ) = branch(q1 ) ∪ branch(q2 )

= { q ′
= { q ′

2

2

| (q ′
| (q ′

According to the semantics of sparql over plain graphs, an answer to a SUJO query q
must be an answer to some branch of q (the converse does not hold though; see e.g. [15,
Example 1]). Or formally, for any SUJO query q and graph A:

sparqlAns(q , A) ⊆ [

q′ ∈branch(q)

sparqlAns(q ′ , A)

So if q ′ ∈ branch(q), we use sparqlAns(q , A, q ′ ) to denote the answers to q over A that
may be obtained by evaluating branch q ′ , i.e.:

sparqlAns(q , A, q ′ ) = sparqlAns(q , A)

Certain Answers to a sparql Query over a Knowledge Base

13

Fragment

evalsparqlAns evalmCanAns

NP-c

UJ/SUJ
well-designed JO
well-designed SJO* ΣP
2 -c
OJ/SUJO

coNP-c

PSpace-c

NP-c

coNP-c

ΣP

2 -c

PSpace-c

Table 2: Combined complexity of evalsparqlAns and evalmCanAns .
“-c” stands for complete, and “A/B” for all fragments between A and B.

Complexity of sparql query evaluation over plain graphs has been extensively studied
(see [13] for a recent overview). When these results are tight, they provide us im-
mediate lower bounds. Indeed, from Proposition 1, certain canonical answers satisfy
Requirement 2, so evalmCanAns is at least as hard as the problem evalsparqlAns below.

Input:

graph A, query q , mapping ω

evalsparqlAns

Decide: ω ∈ sparqlAns(q , A)

Table 2 reproduces results for evalsparqlAns in several commonly studied fragments that
fall within the SUJO fragment. The opt operator has been the focus of a large part
of the literature, as evalsparqlAns has been shown to be PSpace-complete for the OJ
fragment already, in [15]. Particular attention has also been paid to so-called wel l-
designed SJO and JO queries (see [14] for a deﬁnition), which have a natural repre-
sentation as pattern trees [12], with a signiﬁcant reduction from PSpace to ΣP
2 and
coNP-completeness respectively. For SJO, we follow [12] and focus on queries where
the select operator is terminal, i.e. where it does not appear in the scope of join or
opt. The corresponding fragment is called SJO*. Finally, another fragment of inter-
est is UJ, for which query answering is already intractable [15], thus contrasting with
pro jection-free UCQs.
So for each fragment, we investigate whether evalmCanAns matches the upper bounds
for evalsparqlAns . The results are summarized in Table 2. Interestingly, all upper bounds
are matched. This means that for these fragments, the presence of a TBox does not
induce an extra computational cost (as far as worst-case complexity is concerned) when
compared to sparql answers over a plain graph. This observation is analogous to well-
known results for answering UCQs under certain-answer semantics over a DL-Lite R
KB [5], which matches the (NP) upper bound for UCQs over a plain graph.
Before explaining these results, we isolate a key observation:

Proposition 3. If q is a JO query and X1 , X2 ⊆ vars(q), then it can be decided in
O(|q |2 ) whether X1 ∈ max⊆ (adm(q)

14

Julien Corman, Guohui Xiao

The induction guarantees that | min⊆ (base(q))| = 1, so that |base(q))| = O(|q |) must
hold. Then in order to decide X1 ∈ max⊆ (adm(q)

Certain Answers to a sparql Query over a Knowledge Base

15

7 Conclusion and Perspectives

We identiﬁed in this article simple properties to be met by a semantics meant to
conciliate certain answers to UCQs over a KB on the one hand, and sparql answers
over a plain graph on the other hand. We formalized these properties as requirements,
and evaluated diﬀerent proposals (some of which were taken from the literature) against
these requirements.
We also showed that these requirements can be all satisﬁed for the fragment of
sparql with SELECT, UNION and OPTIONAL and DLs with the canonical model prop-
erty. More precisely, we deﬁned a semantics that matches all requirements. We also
provided combined complexity results for query answering over a DL-Lite R KB under
this semantics.
This work is still at an early stage, for multiple reasons. First, the semantics we
deﬁned is arguably ad-hoc, with a procedural ﬂavor, and it would be interesting to
investigate whether it can be characterized in a more declarative fashion. It must
also be emphasized that if query answers deﬁned by this semantics comply with all
requirements, whether the converse holds (i.e. whether there may be answers that
comply with all requirements, but are not returned under this semantics) is still an
open question.
Data complexity may also be investigated, as well as algorithmic aspects, in par-
ticular FO-rewritability, i.e. the possibility to rewrite a query over a KB into a query
over its ABox only, which is a key property for OMQA/OBDA [16]. Other DLs and/or
fragments of sparql may also be considered.
Finally, and more importantly, additional requirements may be identiﬁed, possibly
violated by the semantics we deﬁned. If so, a key question is whether such an extended
set of requirements can still be matched, for reasonably expressive DLs and fragments
of sparql. A negative answer would constitute an argument for the sparql entailment
regimes (or the extension of the owl 2 ql regime proposed in [10]) as a default solution.

16

Julien Corman, Guohui Xiao

References

1. S. Ahmeta j, W. Fischl, R. Pichler, M. Šimkus, and S. Skritek. Towards reconciling

SPARQL and certain answers. In Proceedings of the 24th International Conference

on World Wide Web, pages 23–33. ACM, 2015.
2. M. Arenas and J. Pérez. Querying semantic web data with SPARQL. In Proceed-

ings of the thirtieth ACM SIGMOD-SIGACT-SIGART symposium on Principles

of database systems, pages 305–316. ACM, 2011.
3. A. Artale, D. Calvanese, R. Kontchakov, and M. Zakharyaschev. The dl-lite family

and relations. Journal of artiﬁcial intel ligence research, 36:1–69, 2009.

4. F. Baader, D. Calvanese, D. McGuinness, D. Nardi, and P. Patel-Schneider, edi-

tors. The Description Logic Handbook: Theory, Implementation, and Applications.

Cambridge University Press, 2003.
5. D. Calvanese, G. De Giacomo, D. Lembo, M. Lenzerini, and R. Rosati. Tractable
reasoning and eﬃcient query answering in description logics: The dl-lite family.

Journal of Automated reasoning, 39(3):385–429, 2007.

6. B. Glimm and C. Ogbuji. SPARQL 1.1 entailment regimes. Technical report,
W3C, March 2013.
7. C. Gutierrez, D. Hernández, A. Hogan, and A. Polleres. Certain answers for sparql?
In AMW, 2016.
8. S. Harris, A. Seaborne, and E. Prud’hommeaux. SPARQL 1.1 query language.
W3C recommendation, W3C, 2013.
9. D. Hernández, C. Gutierrez, and A. Hogan. Certain answers for sparql with blank
nodes. In International Semantic Web Conference, pages 337–353. Springer, 2018.
10. R. Kontchakov, M. Rezk, M. Rodríguez-Muro, G. Xiao, and M. Zakharyaschev.
Answering SPARQL queries over databases under OWL 2 QL entailment regime.

In International Semantic Web Conference, pages 552–567. Springer, 2014.

11. E. V. Kostylev and B. C. Grau. On the semantics of SPARQL queries with optional
matching under entailment regimes. In International Semantic Web Conference,
pages 374–389. Springer, 2014.
12. A. Letelier, J. Pérez, R. Pichler, and S. Skritek. Static analysis and optimization of

semantic web queries. ACM Transactions on Database Systems (TODS), 38(4):25,

2013.
13. S. Mengel and S. Skritek. On tractable query evaluation for SPARQL. arXiv

preprint arXiv:1712.08939, 2017.

14. J. Pérez, M. Arenas, and C. Gutierrez. Semantics and complexity of SPARQL.

ACM Transactions on Database Systems (TODS), 34(3):16, 2009.

In Proceedings of the 13th International Conference on Database Theory,

15. M. Schmidt, M. Meier, and G. Lausen. Foundations of SPARQL query optimiza-
tion.
pages 4–33. ACM, 2010.
16. G. Xiao, D. Calvanese, R. Kontchakov, D. Lembo, A. Poggi, R. Rosati, and M. Za-
kharyaschev. Ontology-based data access: A survey. In Proceedings of the Twenty-

Sixth International Joint Conference on Artiﬁcial Intel ligence, IJCAI-18, pages

5511–5519. International Joint Conferences on Artiﬁcial Intelligence Organization,
7 2018.

Certain Answers to a sparql Query over a Knowledge Base

17

A Proof of Proposition 1

Proposition 1. For any SUJO query q and Lcan KB K, canAns(q , K) satisﬁes Re-
quirement 2.

Proof.

Lemma 1 below states the proposition.

Lemma 1. For any UCQ q and ABox A,

canAns(q , h∅, Ai) = sparqlAns(q , A)

Proof.

if A is an ABox, then aDom(hA, ∅i) is the set of constants appearing in A.
In addition, can(hA, ∅i) = A.

So if q is a query, trivially, sparqlAns(q , hA, ∅i) ⊲ aDom(hA, ∅i) = sparqlAns(q , hA, ∅i).
So from Deﬁnition4, canAns(q , hA, ∅i) = sparqlAns(q , hA, ∅i).

B Proof of Proposition 2

Proposition 2. For any SUJO query q and Lcan KB K, mCanAns(q , K) satisﬁes Re-
quirements 1, 2, 3, 4 and 5.

Proof.

The proposition is split into Lemmas 2, 4, 5, 6 and 8 below, one for each requirement.

Lemma 2. For any UCQ q and Lcan KB K, mCanAns(q , K) = certAns(q , K)

Proof. Let q be a UCQ and K an Lcan KB.

Lemma 3 below states that mCanAns(q , K) = canAns(q , K).

Then the claim follows immediately from the observation (made in 5.2) that
canAns(q , K) satisﬁes Requirement 1.

Lemma 3. For any UCQ q and Lcan KB K, mCanAns(q , K) = canAns(q , K)

Proof. Let q be a UCQ.
Then q is of the form h1 union..union hn , where each hi can only contains select or

join operators, and vars(hi ) = vars(hj ) for all i, j ∈ {1..n}.

So immediately from Deﬁnition 1, for each q ′ ∈ branch(q), adm(q ′ ) = {vars(q)}.

Therefore for any q ′ ∈ branch(q), adm(q ′ ) = {vars(q)}

Then from the deﬁnition of mCanAns(q , K, q ′ ):

mCanAns(q , K, q ′ ) = (sparqlAns(q , can(K), q ′ ) ◮ aDom(K)) ⊗ adm(q ′ )
mCanAns(q , K, q ′ ) = (sparqlAns(q , can(K), q ′ ) ◮ aDom(K)) ⊗ {vars(q)}
mCanAns(q , K, q ′ ) = {ωkaDom(K) | ω ∈ sparqlAns(q , can(K), q ′ )} ⊗ {vars(q)}

(1)
(2)
(3)

Then for each ω ∈ sparqlAns(q , can(K), q ′ ), ω ∈ sparqlAns(q , can(K)) must hold.
So since adm(q) = {vars(q)}, dom(ω ) = vars(q) must hold as well.
Therefore vars(q) ⊆ dom(ωkaDom(K) ) iﬀ ωkaDom(K) = ω , i.e. iﬀ range(ω ) ⊆ aDom(K). So

from 4:

mCanAns(q , K, q ′ ) = {ω ∈ sparqlAns(q , can(K), q ′ ) | range(ω ) ⊆ aDom(K)}
mCanAns(q , K, q ′ ) = sparqlAns(q , can(K), q ′ ) ⊲ aDom(K)

(4)
(5)

18

Julien Corman, Guohui Xiao

Finally:

mCanAns(q , K) = [

q′ ∈branch(q)

mCanAns(q , K, q ′ )

So from 5 and 6:

mCanAns(q , K) = [

q′ ∈branch(q)

mCanAns(q , K) = [

q′ ∈branch(q)

sparqlAns(q , can(K), q ′ ) ⊲ aDom(K)

(sparqlAns(q , can(K))

(6)

(7)

Certain Answers to a sparql Query over a Knowledge Base

19

So from 14 and 15:

mCanAns(q , hA, ∅i) = [

q′ ∈branch(q)

mCanAns(q , hA, ∅i) = [

q′ ∈branch(q)

sparqlAns(q , A, q ′ )

(16)

(sparqlAns(q , A)

20

Julien Corman, Guohui Xiao

First, since ω1 = ρ1 |X , ω1 (cid:22) ρ1 must hold.
Then from the deﬁnition of ρ2 , ρ1 (cid:22) ρ2 .
So from the transitivity of (cid:22), ω1 (cid:22) ρ2 .
Finally, since X ⊆ X ′ , ω1 |X (cid:22) ρ2 |X ′ must hold, i.e. ω1 (cid:22) ω2 .

Lemma 6. For any SUJO query q , Lcan KB K and ω ∈ mCanAns(q , K):

dom(ω ) ∈ adm(q)

Proof. Let q be a SUJO query and K an Lcan KB.

Sq′ ∈branch(q)

Then mCanAns(q , K) =

(sparqlAns(q , A, q ′ ) ◮ aDom(K)) ⊗ adm(q ′ ).

So for each ω ∈ mCanAns(q , K), there is a q ′ ∈ branch(q) and solution mapping ω ′ s.t.

ω = ω ′ |X for some X ∈ max⊆ (adm(q ′ )

Certain Answers to a sparql Query over a Knowledge Base

21

Lemma 8. For any queries q1 , q2 , Lcan KB K and solution mapping ω :

if ω ∈ mCanAns(q1 union q2 ) and ω 6∈ mCanAns(q2 ), then dom(ω ) ∈ adm(q1 )

Proof. Let ω ∈ mCanAns(q1 union q2 , K) s.t. ω 6∈ mCanAns(q2 , K).

Then from Deﬁnition 8, because ω ∈ mCanAns(q1 union q2 , K):

ω ∈

[

q′ ∈branch(q1 union q2 )

mCanAns(q1 union q2 , K, q ′ )

And from Deﬁnition 7:

branch(q1 union q2 ) = branch(q1 ) ∪ branch(q2 )

So:

ω ∈

[

q′ ∈branch(q1 )∪branch(q2 )

mCanAns(q1 union q2 , K, q ′ )

So

there

is

an SJO query

q ′

mCanAns(q1 union q2 , K, q ′ )
So there is an ω ′ ∈ sparqlAns(q1 union q2 , can(K))

∈

branch(q1 ) ∪ branch(q2 )

s.t. ω

∈

22

Julien Corman, Guohui Xiao

C Complexity proofs

C.1 Proof of Proposition 3

Proposition 3. If q is a JO query and X1 , X2 ⊆ vars(q), then it can be decided in
O(|q |2 ) whether X1 ∈ max⊆ (adm(q)

Certain Answers to a sparql Query over a Knowledge Base

23

• (⇒).

Let X ∈ adm(q).
From Deﬁnition 2, X = X1 ∪ X2 for some (X1 , X2 ) ∈ adm(q1 ) × adm(q2 ).
And by IH, for i ∈ {1, 2}, Xi = S Bi for some Bi ∈ 2base(q1 ) .
Then from Lemma 9, | min⊆ (base(qi ))| = {Mi } for some Mi ⊆ vars(qi ).

So for each Bi ∈ Bi , Mi ⊆ Bi .
Therefore S Bi = {Mi } ∪ S Bi .
And since X = X1 ∪ X2 , we have:

• (⇐).

X = [ B1 ∪ [ B2
X ={M1 } ∪ [ B1 ∪ {M2 } ∪ [ B2

X ={M2 ∪ B1 | B1 ∈ B1 } ∪ {M1 ∪ B2 | B2 ∈ B2 }

Then from Deﬁnition 9, for each B1 ∈ B1 , M2 ∪ B1 ∈ base(q).
Similarly, for each B2 ∈ B2 , M1 ∪ B2 ∈ base(q).

So X = S B for some B ∈ 2base(q) .
Let X = S B for some B ∈ 2base(q) .
s.t. B = B1 ∪ B2 .
For i ∈ {1, 2}, let Bi = {Bi | Bi ∪ B ′ ∈ B, Bi ∈ base(qi )}.
Then for i ∈ {1, 2}, Bi 6= ∅.
And B = B1 ∪ B2 .
So X = S B = S B1 ∪ S B2 .
And by IH, for i ∈ {1, 2}, S Bi ∈ adm(qi ).
Therefore X = X1 ∪ X2 for some (X1 , X2 ) ∈ adm(q1 ) × adm(q2 ).

So From Deﬁnition 2, X ∈ adm(q).

From Deﬁnition 9, for each B ∈ B, there are (B1 , B2 ) ∈ base(q1 ) × base(q2 )

– if q = q1 opt q2 :

• (⇒).

Let X ∈ adm(q).

From Deﬁnition 2, X ∈ adm(q1 ) or X ∈ adm(q1 join q2 ) must hold.

If X ∈ adm(q1 ), then by IH, X = S B for some B ∈ 2base(q1 ) .

And from Deﬁnition 9, base(q1 ) ⊆ base(q).
If X ∈ adm(q1 join q2 ), then we showed above that X = S B for some B ∈

2base(q1 join q2 ) .

And from Deﬁnition 9, base(q1 join q2 ) ⊆ base(q).

So in both cases, X = S B for some B ∈ 2base(q) .
• (⇐).

Let X = S B for some B ∈ 2base(q) .
for each B ∈ B, B ∈ base(q1 ) or

From Deﬁnition 9,

there are

(B1 , B2 ) ∈ base(q1 ) × base(q2 ) s.t. B = B1 ∪ B2 .

For i ∈ {1, 2}, let Bi = {Bi | Bi ∪ B ′ ∈ B, Bi ∈ base(qi )}.

Then B1 6= ∅.

And B = B1 ∪ B2 .

If B2 = ∅, then X = S B = S B1 .
And by IH, S B1 ∈ adm(q1 ).
So From Deﬁnition 2, X ∈ adm(q).

If B2 6= ∅, then X = S B = S B1 ∪ S B2 .
And by IH, for i ∈ {1, 2}, S Bi ∈ adm(qi ).

24

Julien Corman, Guohui Xiao

Therefore X = X1 ∪ X2 for some (X1 , X2 ) ∈ adm(q1 ) × adm(q2 ).

So From Deﬁnition 2, X ∈ adm(q).

Lemma 11. For any JO query q , |base(q)| = O(|q |)

Proof. By induction on the structure of q .
– if q is a triple pattern, then |base(q)| = 1.
– if q = q1 join q2 , then immediately from the deﬁnition of base(q),

|base(q)| = O(| min⊆ (base(q1 ))|) · |base(q2 )| + | min⊆ (base(q2 ))|) · |base(q1 )|).
So from Lemma 9, |base(q)| = O(|base(q2 )| + |base(q1 )|).
And by IH, |base(qi )| = O(|qi |) for i ∈ {1, 2}.
So |base(q)| = O(|q1 |) + O(|q2 |) = O(|q |).

– if q = q1 opt q2 , the argument is similar to the case q = q1 join q2 .

