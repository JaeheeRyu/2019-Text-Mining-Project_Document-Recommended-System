9
1
0
2

v
o

N

1
2

]

E

S

.

s

c

[

1
v
3
5
5
9
0

.

1
1
9
1

:

v

i

X

r

a

Kooplex: collaborative data analytics portal for
advancing sciences

D. Visontaia,c , J. Stégera,c , J. M. Szalai−Gindlb,c , L. Dobosa,c , L.
Oroszlánya,c , I. Csabaia,c

aDepartment of Physics of Complex Systems, Eötvös Loránd University, H-1117,
Pázmány Péter sétány 1/a. Budapest, Hungary
bDepartment of Information Systems, Eötvös Loránd University, H-1117, Pázmány
Péter sétány 1/c. Budapest, Hungary
cDepartment of Computational Sciences, Wigner Research Centre for Physics of the
HAS, Konkoly-Thege Miklós út 29-33., Budapest 1121, Hungary

Abstract
The web of collaborations between individuals and group of researchers con-
tinuously grows thanks to online platforms, where people can share their
codes, calculations, data and results. These virtual research platforms are in-
novative, mostly browser-based, community-oriented and ﬂexible. They pro-
vide a secure working environment required by modern scientiﬁc approaches.
There is a wide range of open source and commercial solutions in this ﬁeld
and each of them emphasizes the relevant aspects of such a platform diﬀer-
ently.
In this paper we present our open source and modular platform, KOOPLEX1 ,
that combines such key concepts as dynamic collaboration, customizable re-
search environment, data sharing, access to datahubs, reproducible research
and reporting.
It is easily deployable and scalable to serve more users or
access large computational resources.
Keywords: kooplex, collaboration, platform, jupyter, notebook, scalable,
open source, data science, reporting, rstudio, business intelligence, gitea,
seaﬁle, kubernetes, docker

1https://kooplex.github.io

Preprint submitted to Arxiv.org

November 22, 2019

 
 
 
 
 
 
1. Introduction

Innumerable ﬁelds of research, government funded or commercial ser-
vices provide TBs or PBs of data annually. These public or partially pub-
lic datasets residing in datahubs give signiﬁcant momentum to several dis-
ciplines and to researchers. Virtual research environments [1] (VRE) are
web-based, ﬂexible, community-oriented and secure working environments,
through which users can access these data and additional computational re-
sources needed for the production of meaningful results. VREs relieve users
from much of the technical burdens such as software installations, compli-
cated ﬁle and user management and general maintenance. For such a VRE
to be attractive the platform’s layout and user interface should satisfy the
needs of the users and suit their skills. Users can have very diﬀerent level of
technical skillsets and many of the commercial platforms target consumers
with ready-made and standardized workﬂows and visualization tools.
There are platforms that were developed speciﬁcally either for a datahub
[2] and others that were customized for the inner structure of a given institute.
Commercial platforms have the disadvantage from a researcher’s point of
view that the extent of collaboration is limited: others can’t join without
paying the licence fee for its usage. Also every customization, that involves
development on the platform is cost sensitive.
Data sharing and reproducibility is another aspect. There are many ways
and solutions for data sharing, but sharing of the data analysis process in
a reproducible way is somewhat lagging behind. Scientiﬁc results are tradi-
tionally published as human readable articles, but human language lacks the
precision and details of computer codes, therefore reproducing results based
on the written information, even in possession of the data, is often a long
and tiresome process, if possible at all.
The ﬁgures in traditional articles without the ability for zooming or sub-
setting also hide many of the details present in the data and especially multi-
dimensional data sets are hard to represent in passive two dimensional prints.
In the late 80s Mathematica’s 2 ﬁrst notebook frontend was released. Since
then slowly but steadily other languages like R and Python picked up the
concept of “reproducible research” [3]. In the last couple of years R-Studio3

2Wolfram Research Inc., https://www.wolfram.com/mathematica/
3Rstudio, https://www.rstudio.com

2

and Jupyter Notebooks4 [4] - capable to handle Python [5] and several other
languages - became a standard for data analytics and visualization. Note-
books integrate the analysis and visualization process and produce output
that can be rendered as rich interactive web pages.
The paper is organized as follows: In Section 2. we introduce our pro-
totype platform or VRE, the KOOPLEXand in Table 2. we deﬁne how terms
are used in KOOPLEX. In Section 3. and 4. we describe the architecture
of the KOOPLEX platform. In Section 5. we deﬁne aspects that are relevant
when choosing a multiuser platform for datascience or business intelligence.
It also allows us to give context for KOOPLEX. And ﬁnally we present some
use cases of this platform in Section 6.

4JupyterHub, https://github.com/jupyterhub/jupyterhub

3

2. KOOPLEX architecture

With KOOPLEX we intended to add many features that enhances dynamic
collaboration between users with any kind of institutional background and ev-
ery user’s wish to work in their customized/habitual environment. It should
also be emphasized, that in many cases the ability of testing out the lat-
est version of a software and developing someone’s own code in a secluded
environment is crucial for eﬃcient research. With nowadays virtualization
techniques it is possible to integrate well established tools along with ex-
perimental ones into an easily deployable platform. KOOPLEX is therefore a
modular platform that accommodates several services. Users can work in
Notebooks, it provides access to computational resources and supports the
creation of reports in various formats. Users may manage and collaborate
within pro jects, develop and create workﬂows, and publish results.
The KOOPLEX platform consists of two parts, the KOOPLEX Config5 and

the KOOPLEX Hub6 .

KOOPLEX Config deﬁnes the structure of the virtualized backend services
and orchestrate the installation of the platform. Any new services/modules
are added via the KOOPLEX Config.
The KOOPLEX Hub is a django based frontend/webserver of the platform.
Users may access Containers and services on the
There is a demo site, which can be accessed following the KOOPLEX website

https://kooplex.github.io/.

In Table 2. we deﬁne how terms are used in KOOPLEX.

5https://github.com/kooplex/kooplex-config
6https://github.com/kooplex/kooplex-hub

4

Table 1: Usage of terms in this paper and KOOPLEX

Notebook

Volume

Project

Scope

Container

Terms
User

Description
stands for a registered actor. Typically it is a person
but it can be a script created by a person as well.
Col laborator users are collaborators if they are associated with the
same pro ject, sharing the same workspace or data.
is a unique basket of resources granted to Users.
It
oﬀers collaboration, diﬀerent ways of data sharing and
a default common environment.
deﬁnes the relation between a Project or a Report and a
User. A Project or a Report can be private, internal or
public. A User can be the owner, an administrator or a
collaborator of a pro ject.
this could refer to any browser based application such as
Jupyter notebook server, R Studio server, bash terminal
emulator etc.
always refers to Docker container, which runs a Note-
book.
It is a virtual machine in which one can access
data, write and run code and visualize results.
always refers to Docker volumes. A docker volume is
an interface for storages, let it be a directory or a disk
on a remote server. It facilitates their usage and hides
the technical details. We distinguish two types: a Stor-
age Volume is where large amount of data is stored,
and Functional Volume is for installed packages and
softwares, scripts or sample data, that is intended for
other users as well. These Volumes can be dynamically
mounted into a Container as needed.
is a scientiﬁc output of a User .
It consists of an im-
age, a set of codes (e.g. Jupyter notebook), dataﬁles
etc. converted into either a static page with or without
interaction or a hosted application.
an indepently developed code or software, which we in-
terface to KOOPLEX.

Report

Service

5

3. The KOOPLEX Hub

The KOOPLEX Hub is a Django based webserver that connects all the com-
ponents and maintains the consistency of databases, the ﬁlesystem and the
docker containers. The hub provides access to Projects, to settings of services
and Reports. Users do all the work in the Notebooks, which run in Containers
that can be launched and accessed on the hub. Information about system re-
sources and usage of Containers can be viewed. Fig. 1. shows the frontpage
of KOOPLEX with the basic functionalities.

3.1. Projects
Projects deﬁne a storage space and collaboration between its members.
A User can create a new, empty Project or can clone any of the Projects
they have access to according to the Project ’s Scope. The User that created
the Project has special attributes and is called the owner of the Project. The
Project owner and the administrators have the right to conﬁgure the Project.
The environment (any type of packages, modules) are also a property of the
pro ject. This way one can ensure that codes developed will run the same
way and their work will be reproducible by any other collaborator. Project
conﬁguration includes the selection of the (docker) image from which the
Container is created, options for mounting Volumes, changing of Project ’s
Scope and the options to add or remove collaborators.
A new collaboration is born two ways:
• either when a User, who created the Project adds other users to it
• or when the user joins an existing public (or internal) Project.
For each User there is a private workdir for each of its Project (see Section
4.5. for the details of the folder structure). Collaborators of a Project share
data in the Project ’s shared folder and Reports are automatically accessible
for all the collaborators. A User being a member of a Project can decide to
leave it anytime.

3.2. Reports
A Report is a User ’s (scientiﬁc) product from a given Project. Static
or interactive HTML ﬁles provide rich means to visualize and explain the
results. Notebooks (Jupyter, R Markdown, etc) provide tools to create and

6

Figure 1: The frontpage KOOPLEX Hub allows users to create pro jects, set level of collab-
oration, create containers and allocate software modules and storages to it. Reports can
be ﬁnalized. Under the education tag courses can be deﬁned to which students can join.

present interactive reports or dashboards and even REST services, that ac-
tively serves user queries (See for example use case 6.1).
The Scope of a Report can be private, internal or public. Private Reports
are visible to its creator only, whereas internal Report entry points will be
shown to all Users logged in the system. Public Reports are listed publicly
under the hub’s report menu.

7

Diﬀerent versions of a Report can co-exist and a shortcut to the latest
Report is provided. The creator of the Report has the right to reconﬁgure
the Scope of the Report, put an extra password on it or delete it.
The simplest way to create a Report is to convert a Notebook into HTML
or PDF. Pyviz.org, Bokeh7 or Dash by Plotly8 provide python packages
to create interactive visualization in a Jupyter notebook and convert them
into a self-contained document. They can be embedded into other HTML
pages as one large ob ject, or as a set of sub-components templated individu-
ally. Bokeh, Jupyter widgets9 and scriptedforms10 allow to create interactive
pages, which communicate with a server. This has the advantage that data
for the plots can be recalculated and stored on demand and need not to store
all the data at once.
A published REST API (e.g. in a Jupyter notebook) is an online service,
which provides data, static or dynamic plots and images. This feature allows
to embed content into another website with customizable content and without
the need of any webdeveloper skills or the help of system administrators.

7https://bokeh.pydata.org
8https://plot.ly/products/dash/
9https://github.com/jupyter-widgets/ipywidgets
10https://github.com/SimonBiggs/scriptedforms

8

4. KOOPLEX Config

4.1. Virtualization
Docker engine[6] provides the skeleton of the system, which is a light-
weight virtualization or containerization solution. Following modularity prin-
ciples all the components of KOOPLEX platform run in a separate Docker con-
tainer. While Docker isolates all of the software components, it eases their
orchestrated installation with docker-compose in exchange for a negligible
amount of system resources. Fig. 2 shows the architecture of the KOOPLEX
platform and how each component is related to the other. KOOPLEX con-
sists of ﬁve components: the KOOPLEX Hub (webpage, auxiliary services, local
user database etc.), the Notebooks (Jupyter, Rstudio etc.), service providers
(Gitea, GitLab, OwnCloud, SeaFile, etc), storages (data or functional vol-
umes) and optionally the compute nodes. Each of these components might
consist of several docker containers (e.g. the service itself and its database)
and their internal communication happens within a separated network.

Hydra

hub

Proxy

Gitea

Seaﬁle

Hub DB

Ldap

Monitor

Gitea DB

Seaﬁle DB

Notebook1

Notebook2

Notebookp

Report1

Reportq

Figure 2: The KOOPLEX architecture. All the components are dockerized. In the ﬁgure
the rectangles represent docker containers and the cylinders stand for docker volumes.
Nginx is the web server, that directs traﬃc between the User and the platform with static
routing. Hydra manages user authentication. The conﬁgurable-http-proxy is a dynamic
routing system that connects the User to the Notebooks. Ldap acts as a local usermanager
and provides the Containers with the right user ids. Reports are served from Containers
as well. Notebooks can have further access to compute nodes via a job scheduler system.

One of our motivation with the KOOPLEX platform was to create a mecha-
nism, which allows to run the calculations (the Notebooks ) close to the data.

9

In order to scale up and distribute computational tasks we have investigated
several state of the art solutions. According to our experience Kubernetes11 is
a well-conﬁgurable and ﬂexible automated deployment system, that extends
Docker functionalities. With Kubernetes it is possible to spawn Containers
to the host closest to the data while considering the machines’ workload.

4.2. Hydra and user authenticaton
Django is capable of administering of users and communicate with service
providers but for the sake of modularity and to keep the platform robust we
use an independent authentication layer, Hydra12 , to keep the user database
separate from KOOPLEX. This motivates the usage of already existing user
databases, which keeps the management simpler and prevents KOOPLEX to
store any User provided password.

4.3. Local user database, LDAP
Regardless of the authentication method into a KOOPLEX instance it is
necessary to have a local copy of the user database, which is stored in LDAP
13 . This ensures the unequivocal user identiﬁcation through all Notebooks
and services.

4.4. Volumes
Storage volumes
Docker facilitates the usage of data storages. Once a docker volume is
created it can be mounted to any Container. This is especially useful when
we want to access data from physically diﬀerent storage systems. Within
KOOPLEX access to these storages can be restricted to Users or groups of
Users , which is necessary in case of datahubs with sensitive content.

Functional volumes
Sharing of environments between Users is possible on multiple levels. One
way is by using Functional Volumes They are independent ob jects, don’t be-
long to any pro ject and can be attached to any Container. Users might
place here sample data and other ﬁles that are not meant to be version con-
trolled. Functional Volumes may contain diﬀerent set of packages, samples
of datasets, test ﬁles etc.

11https://kubernetes.io/

12https://github.com/ory/hydra

13https://www.openldap.org/

10

4.5. Containers and folder structure
A User can create Containers. In a Container any number of Projects
can be accessed, and each of them will appear as a separate folder (as shown
in Fig. 3.). Containers are spawned from Docker images. In each Container
a browser based service, a Notebook runs such as Jupyter notebook server or
R Studio server etc.
In Table 2. and 3. we listed the persistent directories that KOOPLEX
prepares for each User, which can be accessed in a Container . There is a
list of folders, which belong to the attached Service (See Table 3. for further
description). In Fig. 3. we illustrate the folder structure of a Container.

~/<user>

~/share/

~/service/

~/reports/

/mnt/Dx

/Vol/Vx

Home1

Home2

Homei

Homen

pro ject1

service1

report1

pro jectx
pro jecti
pro jectn

git

Seaﬁle
servicen

report1
reporti
reportn

Data1

Data2

Vol1

Vol2

Datal

Volk

Figure 3: The ﬁlesystem view. Each user and pro ject have their own persistent storage.
There are parts that overlap or span across a collaboration. On the ﬁgure the areas
ﬁlled with darker color illustrate the directories that a particular User have access to in
a Container. Every User has a private folder. In the share directory the shared space of
each connected pro ject appear. A service is a component such as version control system,
cloud based ﬁlesharing etc, of which content can be accessed from the Container. Reports
are published notebooks, of which snapshots are stored in read-only folders. Datal and
V olk refer to Storage Volumes and Functional Volumes .

4.6. Customizing the working environment
Customization of the environment is important for explorative work and
the mechanism of User deﬁned persistent environments accompanying the
notebooks help to create reproducible workﬂows.
In KOOPLEX a User can

11

Folder

Home
Workdir
Share

Functional
Volumes
Storage
Volumes
Report

Table 2: Persistent folders in eachContainer

Description
is completely private
is a private working directory for each pro ject
folder is shared between all the pro ject members with
read/write access depending on their role
store additional packages, softwares, they are writable
only for the maintainer
access for the large datasets

folder is for preparing the publishable reports or appli-
cations and it also stores the diﬀerent versions of previ-
ously committed reports

create Functional Volumes to store additional pieces of code, or small size
data ﬁles to pass information across various environments or support pro ject
independent reproducibility.
It is also possible to create a cross platform
representation of the environment as an encapsulated Singularity14 image.
These images can be published under various Scopes just like Reports.

4.7. Services
Services such as Gitea15 , Seaﬁle16 etc. add their own functionalities and
extra content to the Containers. The more such services are available on the
platform instance, the higher is the chance that someone ﬁnds motivation
to join in and start to collaborate. User level settings of these Services are
accessible from the KOOPLEX Hub’s frontend.

4.8. Compute nodes
Computationally intensive jobs can be submitted to separate computers
or docker containers with dedicated resources. There are several softwares

14https://github.com/sylabs/singularity
15https://gitea.io
16https://www.seafile.com

12

Folder

Cloud

Vc

Table 3: Folder structure for Services in each Container

Description
ﬁles stored in this directory are automatically synchro-
nized with the attached cloud like service (Seaﬁle, Own-
Cloud, NextCloud etc). These platforms oﬀer the pos-
sibility to share ﬁles and folders independently from
KOOPLEX, and have desktop clients for private synchro-
nization as well.
in each subdirectory a the version controlled content
is to be found that reside in one of the repositories
(Github, GitLab, Gitea etc.)
to which the User pro-
vided credentials (these are tokens and public keys and
not passwords)

to manage job queue system, such as SLURM17 , PBS18 or HTCondor19 . The
client side softwares of these Services are compiled into the images and thus
available in the Containers.

17https://slurm.schedmd.com/
18https://github.com/pbspro/pbspro
19http://research.cs.wisc.edu/htcondor/

13

5. A brief overview of other platforms

In this section we give an overview of currently available not necessarily
complete list of data science and business intelligence platforms. It helps the
reader to put KOOPLEX into context. We enumerate and evaluate some key
aspects (See Table 4. and 6.) that one might take into account when choosing
the suitable solution from the plethora of platform implementations.

Table 4: General key aspects of VREs

Term

Complete
workﬂow

Customizable
environment
Scalability

Description
the possibility to conduct the whole data processing,
calculation and visualization from the beginning till
the end on the same platform with possibly applying
functionalities via external tools or services.
a modular server structure with user rights granted
to customize the working environment.
performance tuning by adding extra resources at any
time.
authentication to the VRE can also be done via ex-
ternal identity providers ( See Section 4.2.)
source code open for inspection and with permission
granted to freely re-use and/or redistribute.20
Browser based the User does not need to install additional pro-
grammes to use the platform.

Flexible user
management
Open source

In Table 5. and 7. we compare diﬀerent platforms from an individual user
or administrator point of view and take into account collaborative aspects.

5.1. Col laboration
In a complex research pro ject, where many disciplines and participants
with diﬀerent skills come together collaboration is a key aspect. It can be
manifested on many levels:
• consecutive: a collaborator’s input depends on another’s output.

14

Comparison of platforms I.
(workﬂow)
(customization)
(scaling)

(open source)

L

L

L
P

L

x
x
x
x
x

P

P
P
A
x

NI
P

L

L

P

L

VRE
Colab8
CodeOcean
JEODPP
WholeTale
SciServer
Crewspark
Anaconda*
JupyterHub*
CoCalc*

KOOPLEX*

Table 5: General comparison of VREs. *: needs to be installed, L: this feature is available
only in limited form, P: paid service, A: for academic use only, NI: we have no information
about it and x: this feature is ’not present’ in the platform.

Term

Collaboration

Table 6: Collaborative key aspects of VREs

Description
various methods implements sharing of data and/or
code associated with Users (See Section 5.1.)

Reporting

an output of work to be presented to a certain audi-
ence (See Section 5.2.)

Reproducibility

data and code compiled with and bound to the re-
port to support its reproducibility and to prove cred-
ibility 21 (See Section 5.3.)

15

Comparison of platforms II.
(collaboration)
(reproducibility)
(reporting)
L
x
x

x
L
x

P
x
L

x

x

P
x

x

P
x
x

(user management)
x
x
x
x
x
x
P

L

VRE
Colab
CodeOcean
JEODPP
WholeTale
SciServer
Crewspark
Anaconda
JupyterHub
CoCalc

KOOPLEX

Table 7: L: this feature is available only in limited form, P: paid service, A: for academic
use only, NI: we have no information about it and x: this feature is ’not present’ in the
platform.

• paral lel/same time: collaborators work on the same problem editing
the same documents, codes or work with the same data at the same
time.
• randomly induced:
individuals randomly join and contribute to each
others work. Similar to the case of open source code development.

5.2. Reporting
It is a functional feature of the platform that Reports can be created,
which connects the Users (researchers, developers) and the public. For in-
stance laymans, funding agencies, companies can be interested in the reported
information and can utilise it in their own business or academic work.

5.3. Reproducibility
In science reproducibility is an inherent key concept. A study is regarded
reproducible if the given speciﬁc set of computational functions and chain
of analysis (usually speciﬁed in terms of code) reproduces exactly the same
ﬁgures. On the long run scientiﬁc progress relies on reproducibility and reuse
of research [7].
By the time when some of the relevant questions are answered research
goes through diﬀerent stages and passes certain checkpoints. At these stages

16

written notes, notebooks, test data, codes and ﬁgures are created. These
collections should be accessible to those who intend to check and reproduce
the results starting from step one with the raw data.

5.3.1. Platforms and repositories
In this section we focus on a few popular platforms based on the previously
detailed notions.
The aspects of reproducibility (reporting ) are already realized as "tales"
on Wholetale.org [8], as "capsules" on codeocean.com [9] or as "kernels" in
Kaggle 22 . Wholetale.org and Kaggle are both browser based platforms that
employ Jupyter notebook in their VRE, and aim to support users in all phases
of the research lifecyle, from data acquisition to publication, including the
cross-linking of data, software, workﬂows and manuscripts. Similarly, in
KOOPLEX the whole procedure can be saved either as a Report or compiled in
a Singularity image.
A versatile solution that incorporates more of the above aspects is Codeo-
cean 23 [9] with customizable environment (customization ) and parallel col-
laboration (col laboration ).
Anaconda 24 is a commercial service and its pricing depends either on
usage of the computational resources or on the number of users and enabled
services. This platform also provides tools for building workﬂows (workﬂow ).
The Sciserver 25 is a platform intended for academic research and pro-
vides free access to many datahubs (SDSS DAS, recount2, JHTDB), large
computational resources and oﬀers some collaborative features.
Google’s Colab 26 oﬀers parallel collaboration (col laboration ), (workﬂow )
and (user management ) is automatically fulﬁlled through Google services.
(customization ), (scaling ) and (reproducibility ) are limited.
An example for data-intensive geospatial computing means is the JRC
Earth Observation Data and Processing Platform [2, 10]. In this implementa-
tion (workﬂow ), (scaling ), (col laboration ), (reporting ), and (reproducibility )
are fulﬁlled.
Strictly speaking the Experiment Factory [11] is not a platform rather it

22http://www.kaggle.com/
23https://codeocean.com/
24https://www.anaconda.com/enterprise
25http://www.sciserver.org/
26https://colab.research.google.com

17

is a repository. It is designed for storing reproducible experiments in the ﬁeld
of behavioral research (reproducibility ) using docker images. The spawned
containers can be downloaded and used locally.

18

6. Use cases of KOOPLEX

Installation of KOOPLEX with the default parameters requires the basic
knowledge of bash and python commands in linux. A KOOPLEX instance
served by an average desktop computer can support the work of a fairly large
group, for up to 10–20 users in parallel without they doing computationally
intensive calculations. For a larger userbase it is recommended to spawn the
Containers to a separate server or to a cluster of servers.

6.1. Remote Datahubs
We currently operate several KOOPLEX instances for diﬀerent target user
groups. One of the instances is deployed at EMBL-EBI[12] for the ENA
internally, where users carry out the ﬁnal steps of the analysis of the residing
data and generate visualizations. There are special pieces of code developed
in Notebooks , from which the automatically generated Reports are published
and served through the Pathogens portal27 (See Fig. 4). Note, the two
types of Reports used most often in this KOOPLEX instance to be rendered in
a web browser. The simpler kind is a static HTML that can give a quick
overview about the content of the datahub on the given day. Additionally,
the interactive report type allow users to ﬁlter, sort, arrange and visualize
the data in their web browser without having to write a line of code. Here
the primary aim of the Reports is to lower the initial eﬀort needed to explore
the content of a datahub. However, expert users can further develop the code
behind these reports opening the door to an even richer data exploration and
visualization.

6.2. Genome sequencing
As a natural consequence of that genome sequencing gets cheaper by the
time the amount of data produced is increasing as well. As a preprocessing
step the raw data is typically aligned to a reference genome database in order
to determine the most probable kinds of organisms present in the sequenced
material [13]. This digested data can be further analyzed e.g. for mutations.
With the evolution of genome sequencing equipment the data collected and
processing tools also change and researchers have to come up with newer and
newer evaluation workﬂows. KOOPLEX is and ideal platform to deploy next to a
genome sequencing datahub, to explore and to develop such workﬂows, which

27https://www.ebi.ac.uk/ena/pathogens/explore

19

Figure 4: The Pathogens portal at EMBL-EBI. A KOOPLEX portal is running close to the
datahubs and one the codes developed in Notebooks generates a public report daily

may include the visualization of the results, as Reports. Alternatively, the
visualization capabilities of the KOOPLEX platform can be extended with extra
services, like the Cbioportal28 , which consumes data digested by Notebooks.

6.3. Kooplex for education
The teacher–student relationship can be regarded as a type of collabo-
ration. With slight addition to the hub code a KOOPLEX-education instance
has been operated for two years now at Eötvös University, Budapest29 (Fig.
5.). A course taught at universities can easily mapped to the concept of
Project, where by their role teachers are the owner or administrators of the
course, whereas students act as collaborators with the restriction of having
read-only access to the shared material. In order to extend functionalities
of the KOOPLEX-education instance plugins are added to the hub to manage
assignments, to schedule the collection of homework, to help correction and
mechanisms to give feedback to students. Note, submitted assignments are

28http://www.cbioportal.org/
29https://kooplex-edu.elte.hu/hub

20

analog to the Reports created from the Notebooks.
In KOOPLEX-education instance the directory structure is similar to Fig. 3
with carefully applied access rights and it resembles after the one used in
nbgrader 30 .
In this instance, depending on their role, whether a teacher
or a student, personal working directories are the entry point for creating
assignments or for working on them. The resource material, the common
data or other auxiliary ﬁles needed for the completion of an assignments are
placed read-only ﬁles in share to avoid unnecessarily duplication.

Figure 5: The front page of an instance of the KOOPLEX platform, that is used for educa-
tional purposes at the Eötvös University at Budapest.

30https://github.com/jupyter/nbgrader

21

7. Summary

KOOPLEX is a platform for easy access to datahubs, for collaborative work,
for developing new workﬂows and for creating and publishing static or in-
teractive reports. It is clear from the user feedback regarding the platform
instances mentioned in Section 6. that the combination of such integrated
services is attractive. Accessing the various modules in the same user space
speeds up analysis, code development work and sharing, not having to move
data and ﬁles around between disconnected components. The platform has
been designed in a way that the integration of new tools taken up by the
research community is straight forward. This feature helps to keep up with
the ever evolving user requirements.

Acknowledgements

This study has received funding from the European Union’s Horizon 2020
research and innovation program under Grant Agreement No. 643476 (COM-
PARE) and from National Research, Development and Innovation Fund of
Hungary Pro ject (FIEK_16-1-2016-0005 to I.C.). The authors are grate-
ful to G. Vattay, S. Laki and students at Eötvös University for help with
thorough testing of the system. This work was completed in the ELTE Ex-
cellence Program (783-3/2018/FEKUTSRAT) supported by the Hungarian
Ministry of Human Capacities. The work was supported by the Hungarian
National Research, Development and Innovation Oﬃce (NKFIH) through
Grants No. K120660, K109577, K124351, K124152, KH129601, and the
Hungarian Quantum Technology National Excellence Program (Pro ject No.
2017-1.2.1-NKP-2017- 00001).

Conﬂict of interest

The authors declare that there is no conﬂict of interest regarding the
publication of this manuscript.

[1] L. Candela, D. Castelli, P. Pagano, Virtual research environments: an
overview and a research agenda, Data Science Journal 12 (2013) GRDI–
013, doi:\bibinfo{doi}{https://doi.org/10.2481/dsj.GRDI-013}.

[2] P. Soille, A. Burger, D. D. Marchi, P. Kempeneers, D. Rodriguez,
V. Syrris, V. Vasilev, A versatile data-intensive computing platform

22

for information retrieval from big geospatial data, Future Generation
Computer Systems 81 (2018) 30–40, doi:\bibinfo{doi}{https://doi.org/
10.1016/j.future.2017.11.007}.

[3] M. Munafò, B. Nosek, D. Bishop, K. Button, C. Chambers, N. d.
Sert, J. Ioannidis, A manifesto for reproducible science. Nature Hu-
man Behaviour, 1, 0021, doi:\bibinfo{doi}{https://doi.org/10.1038/
s41562-016-0021}, 2017.

[4] T. Kluyver, B. Ragan-Kelley, F. Pérez, B. E. Granger, M. Busson-
nier, J. Frederic, K. Kelley, J. B. Hamrick, J. Grout, S. Corlay,
et al., Jupyter Notebooks-a publishing format for reproducible compu-
tational workﬂows. (2016) 87–90doi:\bibinfo{doi}{https://doi.org/10.
3233/978-1-61499-649-1-87}.

[5] F. Perez, B. E. Granger, IPython: A System for Interactive Scientiﬁc
Computing, Computing in Science Engineering 9 (3) (2007) 21–29, ISSN
1521-9615, doi:\bibinfo{doi}{https://doi.org/10.1109/MCSE.2007.53}.

[6] D. Merkel, Docker: Lightweight Linux Containers for Consistent Devel-
opment and Deployment, Linux J. 2014 (239), ISSN 1075-3583, URL

http://dl.acm.org/citation.cfm?id=2600239.2600241.

[7] S. A. Green, A. Clyburne-Sherin, Computational Reproducibility via
Containers in Social Psychology doi:\bibinfo{doi}{https://doi.org/10.
17605/OSF.IO/MF82T}.

[8] A. Brinckman, K. Chard, N. Gaﬀney, M. Hategan, M. B. Jones,
K. Kowalik, S. Kulasekaran, B. Ludäscher, B. D. Mecum, J. Nabrzyski,
V. Stodden, I. J. Taylor, M. J. Turk, K. Turner, Computing environ-
ments for reproducibility: Capturing the “Whole Tale”, Future Gener-
ation Computer Systems 94 (2018) 854 – 867, ISSN 0167-739X, doi:
\bibinfo{doi}{https://doi.org/10.1016/j.future.2017.12.029}.

[9] C. Boettiger, An introduction to Docker for reproducible research, ACM
SIGOPS Operating Systems Review 49 (1) (2015) 71–79, URL https:

//dl.acm.org/citation.cfm?id=2723882.

[10] D. De Marchi, P. Soille, Advances in interactive processing and visu-
alisation with JupyterLab on the JRC Big Data Platform (JEODPP),

23

in: Proc. of the 2019 conference on Big Data from Space (BiDS’19),
Publications Oﬃce of the European Union, Luxembourg, 45–48, doi:
\bibinfo{doi}{10.5281/zenodo.3239239}, URL https://doi.org/10.

5281/zenodo.3239239, 2019.

[11] V. Sochat, The Experiment Factory: Reproducible experiment con-
tainers, The Journal of Open Source Software 3 (2018) 521, doi:
\bibinfo{doi}{https://doi.org/10.21105/joss.00521}.

[12] C. Amid, N. Pakseresht, N. Silvester, S. Jayathilaka, O. Lund, L. D.
Dynovski, B. A. Pataki, D. Visontai, M. Cotten, B. B. Xavier, et al.,
The COMPARE Data Hubs, bioRxiv (2019) 555938.

[13] O. Pipek, I. Csabai, Worldwide human mitochondrial haplogroup dis-
tribution from urban sewage, Scientiﬁc Reports 9 (2019) 2045–2322,
doi:\bibinfo{doi}{https://doi.org/10.1038/s41598-019-48093-5}.

24

