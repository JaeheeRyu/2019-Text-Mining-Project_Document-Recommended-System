9
1
0
2

v
o

N

1
2

]

O

L

.

s

c

[

2
v
4
0
1
2

.

2
0
9
0

:

v

i

X

r

a

Tableau-based decision procedure for full coalitional multiagent
temporal-epistemic logic of linear time

Valentin Goranko∗

Dmitry Shkatov†

agent who do not learn or do not forget, are unde-
cidable (with common knowledge), or decidable but
with non-elementary time lower bound (without com-
mon knowledge). For the remaining multiagent log-
ics, the lower bounds from [4] range from PSPACE
(systems without common knowledge), through EX-
PTIME (with common knowledge), to EXPSPACE
(synchronous systems with no learning and unique
initial state). To the best of our knowledge, how-
ever, even for the logics from [4] with a relatively low
complexity lower bound, no decision procedures with
matching upper bounds have been developed. In this
paper, we set out to develop such decision procedures
based on incremental tableaux, starting with the mul-
tiagent case over linear time, which involves no essen-
tial interaction between knowledge and time. It turns
out that, under no other assumptions regarding learn-
ing or forgetting, the synchronous and asynchronous
semantics are equivalent with respect to satisﬁabil-
ity. We consider a more expressive epistemic lan-
guage than the ones considered in [4], to wit, the one
involving operators for common and for distributed
knowledge for al l coalitions of agents. We call the
resulting logic CMATEL(CD+LT)

Abstract

We develop a tableau-based decision procedure for
the full coalitional multiagent temporal-epistemic
logic of linear time CMATEL(CD+LT). It ex-
tends LTL with operators of common and dis-
tributed knowledge for all coalitions of agents. The
tableau procedure runs in exponential time, match-
ing the lower bound obtained by Halpern and
Vardi for a fragment of our logic, thus providing
a complexity-optimal decision procedure for CMA-
TEL(CD+LT).

1

Introduction

Knowledge and time are among the most important
aspects of multiagent systems. Various temporal-
epistemic logics, proposed as logical frameworks for
reasoning about these ascpects of multiagent systems
were studied in a number of publications during the
1980’s, eventually summarized in a uniform and com-
prehensive study by Halpern and Vardi [4]. In [4], the
authors considered several essential characteristics of
temporal-epistemic logics: one vs.
several agents,
synchrony vs. asynchrony, (no) learning, (no) for-
getting, linear vs. branching time, and the (non-)
existence of a unique initial state. Based on these,
they identify and analyze 96 temporal-epistemic log-
ics and obtain lower bounds for the complexity of
a satisﬁability problem in each of them.
It turns
out that most of the logics with more than one

∗ School of Mathematics, University of the Witwatersrand,
South Africa
† School of Computer Science, University of the Witwater-
srand, South Africa

 
 
 
 
 
 
2 The Logic
CMATEL(CD+LT)

2.1 Syntax

The language L of CMATEL(CD+LT) contains a
set AP of atomic propositions, a suﬃcient repertoire
of Boolean connectives, say ¬

M, (r, n) (cid:13) ¬ϕ iﬀ not M, (r, n) (cid:13) ϕ;
M, (r, n) (cid:13) ϕ ∧ ψ iﬀ M, (r, n) (cid:13) ϕ and M, (r, n) (cid:13)

M, (r, n) (cid:13) ❣ϕ iﬀ M, (r, n + 1) (cid:13) ϕ;
M, (r, n) (cid:13) ϕ U ψ iﬀ M, (r, i) (cid:13) ψ for some i ≥ n
such that M, (r, j ) (cid:13) ϕ for every n ≤ j <

ψ ;

i;

M, (r, n) (cid:13) DAϕ iﬀ M, (r′ , n′ ) (cid:13) ϕ
for every ((r, n), (r′ , n′ )) ∈ RD
A ;
M, (r, n) (cid:13) CAϕ iﬀ M, (r′ , n′ ) (cid:13) ϕ
for every ((r, n), (r′ , n′ )) ∈ RC
A ;

Note, that in the semantics deﬁned above the la-
bel ling function acts on points, not states,
i.e.,
it
is point-based. To make the semantics state-based,
one must impose the additional condition: if r(n) =
r′ (n′ ) then L(r, n) = L(r′ , n′ ). However, for the case
of linear time logics these two semantics are equiva-
lent in terms of satisﬁability and validity (this is an
easy consequence of the fact that, in the linear case,
all epistemic operators have built-in implicit univer-
sal quantiﬁcation over paths).
The satisfaction condition for the operator CA
can be paraphrased in terms of reachability. Let
F be a (pseudo-) TEF over the set of runs R
and let (r, n) ∈ R × N. We say that a point
(r′ , n′ ) is A-reachable from (r, n) if either r = r′
and n = n′ or there exists a sequence (r, n) =
(r0 , n0 ), (r1 , n1 ), . . . , (rm−1 , nm−1), (rm , nm )
=
(r′ , n′ ) of points in R × N such that,
for ev-
ery 0 ≤ i < m, there exists ai ∈ A such that
((ri , ni ), (ri+1 , ni+1 )) ∈ RD
ai . Then, the satisfac-
tion condition for CA becomes equivalent to the
following:
M, (r, n) (cid:13) CAϕ iﬀ M, (r′ , n′ ) (cid:13) ϕ whenever
(r′ , n′ ) is A-reachable from (r, n).
Satisﬁability and validity in (a class of ) models is
deﬁned as usual.
It is easy to see that if Σ = {a}, then Daϕ ↔ Caϕ
is valid in every TEM for every ϕ ∈ L. Thus, the
single-agent case is essentially trivialized and, there-
fore, we assume hereafter that Σ contains at least 2
(names of ) agents.

3 Hintikka structures

Even though we are ultimately interested in testing
formulae of L for satisﬁability in a TEM, the tableau
procedure we present tests for satisﬁability in a more
general kind of semantic structures, namely a Hin-
tikka structure. We will show that θ ∈ L is satisﬁ-
able in a TEM iﬀ it is satisﬁable in a Hintikka struc-
ture, hence the latter test is equivalent to the former.
The advantage of working with Hintikka structures
lies in the fact that they contain as much semantic
information about θ as is necessary, and no more.
More precisely, while models provide the truth value
of every formula of L at every state, Hintikka struc-
tures only determine the truth of formulae directly
involved in the evaluation of a ﬁxed formula θ, in
whose satisﬁability we are interested. Another impor-
tant diﬀerence between models and Hintikka struc-
tures is that, in Hintikka structures the epistemic re-
lations RD
A and RC
A only have to satisfy the properties
laid down in Deﬁnition 2.1. All the other informa-
tion about the desirable properties of epistemic rela-
tions is contained in the labeling of states in Hintikka
structures. This labeling ensures that every Hintikka
structure generates a pseudo-model (by the construc-
tion of Lemma 3.5), which can then be turned into a
model using the construction of Lemma 3.9.

Deﬁnition 3.1 A set ∆ ⊆ L is fully expanded if it
satisﬁes the fol lowing conditions (Sub(ψ) stands for
the set of subformulae of ψ):

1. if ¬¬ϕ ∈ ∆ then ϕ ∈ ∆;
2. if ϕ ∧ ψ ∈ ∆, then ϕ ∈ ∆ and ψ ∈ ∆;
3. if ¬(ϕ ∧ ψ) ∈ ∆ then ¬ϕ ∈ ∆ or ¬ϕ ∈ ∆;
4. if ¬ ❣ϕ ∈ ∆ then ❣¬ϕ ∈ ∆;
5. if ϕ U ψ ∈ ∆ then ψ ∈ ∆ or ϕ, ❣(ϕ U ψ) ∈ ∆;
6. if ¬(ϕ U ψ) ∈ ∆ then ¬ψ , ¬ϕ ∈ ∆ or
¬ψ , ¬ ❣(ϕ U ψ) ∈ ∆;
7. if DAϕ ∈ ∆ then DA′ ϕ ∈ ∆ for every A′ such
that A ⊆ A′ ⊆ Σ;
8. if DAϕ ∈ ∆ then ϕ ∈ ∆;
9. if CAϕ ∈ ∆ then Da (ϕ ∧ CAϕ) ∈ ∆ for every
a ∈ A;
10. if ¬CAϕ ∈ ∆ then ¬Da (ϕ ∧ CAϕ) ∈ ∆ for some
a ∈ A;

3

For the opposite direction, we ﬁrst prove that the
existence of a TEHS satisfying θ implies the existence
of a pseudo-model satisfying θ; then, we show that
this in turn implies the existence of a model satisfying
θ.

Lemma 3.5 Let θ ∈ L be such that there exists a
TEHS for θ. Then, θ is satisﬁable in a pseudo-TEM.

Let

H

=

A }A∈P + (Σ) , {RC
A }A∈P + (Σ) ,

Proof.
(Σ, S, R, {RD
H ) be a TEHS for θ. We build a pseudo-
TEM satisfying θ as follows.
First,
for every
A ∈ P + (Σ),
let R′D
A be the reﬂexive, symmet-
ric, and transitive closure of S A⊆BRD
B and let
A be the transitive closure of S a∈AR′D
a . No-
tice that RD
A and RC
A for every
A ∈ P + (Σ). Next,
let L(r, n) = H (r, n)

A ⊆ R′D

A ⊆ R′C

R′C

11. if ψ ∈ ∆ and DAϕ ∈ Sub(ψ) then either DAϕ ∈
∆ or ¬DAϕ ∈ ∆.

(TEHS)

Deﬁnition 3.2 A
temporal-epistemic
Hintikka
structure
is
a
tuple
(Σ, S, R, {RD
such
that
(Σ, S, R, {RD
is
a
TES, and H is a labeling of points in R × N with
sets of formulae, satisfying the fol lowing conditions,
for al l (r, n) ∈ R × N:

A }A∈P + (Σ) , {RC
A }A∈P + (Σ) , H )
A }A∈P +(Σ) , {RC
A }A∈P + (Σ) )

H1 if ¬ϕ ∈ H (r, n), then ϕ /∈ H (r, n);

H2 H (r, n) is ful ly expanded;

H3 if ❣ϕ ∈ H (r, n), then ϕ ∈ H (r, n + 1);

H4 if ϕ U ψ ∈ H (r, n), then there exists i ≥ n such
that ψ ∈ H (r, i) and ϕ ∈ H (r, j ) holds for every
n ≤ j < i;
H5 if ¬DAϕ ∈ H (r, n), then there exists r′ ∈ R
and n′ ∈ N such that ((r, n), (r′ , n′ )) ∈ RD
A and
¬ϕ ∈ H (r′ , n′ );
H6 if ((r, n), (r′ , n′ )) ∈ RD
A , then DA′ ϕ ∈ H (r, n) iﬀ
DA′ ϕ ∈ H (r′ , n′ ), for every A′ ⊆ A;
H7 if ¬CAϕ ∈ H (r, n), then there exists r′ ∈ R and
n′ ∈ N such that ((r, n), (r′ , n′ )) ∈ RC
A and ¬ϕ ∈
H (r′ , n′ ).

Synchronous TEHSs (STEHSs) are deﬁned likewise.

Deﬁnition 3.3 A set of formulae Θ is satisﬁable in
a TEHS H with a labeling function H if there exists a
point (r, n) ∈ H such that Θ ⊆ H (r, n). Analogously
for formulae.

Now, we show that θ ∈ L is satisﬁable in a TEM
iﬀ it is satisﬁable in a TEHS. One direction is al-
most immediate, as every TEM naturally induces a
TEHS. More precisely, given a TEM M, deﬁne the
extended labeling L+ on the set of points of M as
follows: L+ (r, n) = { ϕ | M, (r, n) (cid:13) ϕ } for every
(r, n). The following claim is then straightforward.

Lemma 3.4 Let M = (F, L) be a TEM satisfying
θ ∈ L, and let L+ be the extended labeling on M.
Then, H = (F, AP, L+) is a TEHS satisfying θ.

TEM implies its satisﬁability in a TEM, we use a
modiﬁcation of the construction from [1, Appendix
A1] (see also [6]).

A }A∈P + (Σ) ,

A }A∈P + (Σ) , AP, L)

Deﬁnition 3.6 Let M = (Σ, S, R, {RD
{RC
be
a
(pseudo-)TEM and
let r, r′ ∈ R and n, n′ ∈ N.
A maximal
path from (r, n) to (r′ , n′ ) in M is a sequence
(r, n) = (r0 , n0), A0 , (r1 , n1 ), . . . , Am−1 , (rm , nm )
(r′ , n′ )
=
such
that,
for
every
0
≤
i
<
m,
((ri , ni ), (ri+1 , ni+1 ))
∈ RD
Ai , but ((ri , ni ), (ri+1 , ni+1 )) /∈ RD
B for any
B such that Ai ⊂ B ⊆ Σ. A segment ρ′ of a maximal
path ρ starting and ending with a point is a sub-path
of ρ.

np+1 ) . . . , Ap+q−1 , (rp+q , np+q )

Deﬁnition 3.7 Let
ρ
=
(r0 , n0 ), A0 . . . , An−1 , (rm , nm) be a maximal path in
M. The reduction of ρ is obtained by, ﬁrst, replac-
ing in ρ every longest sub-path (rp , np ), Ap , (rp+1 ,
such
that
rp = rp+1 = . . . = rp+q with rp (i.e., eliminat-
ing loops) and, then, by replacing in the resultant
path
every
longest
sub-path
(rj , nj ), Aj , (rj+1 ,
nj+1 ) . . . , Aj+m−1 , (rj+m , nj+m ) such that Aj =
Aj+1 = . . . = Aj+m−1 with (rj , nj ), Aj , (rj+m , nj+m )
(reducing multiple transitions along the same relation
into a single transition). A maximal path is reduced
if it equals its reduction.

Deﬁnition 3.8 A (pseudo-)TEM M is forest-like if,
for every r, r′ ∈ R and every n, n′ ∈ N, there exists at
most one reduced maximal path from (r, n) to (r′ , n′ ).

One diﬀerence of the construction presented below
from the one in [1, Appendix A1] is that, instead
of producing a tree-like model, we rather produce a

A ⊆ R′D

are two cases to consider.
If (r, n) = (r′ , n′ ), then
the conclusion immediately follows from (H2). Oth-
erwise, there exists an undirected path from (r, n) to
(r′ , n′ ) along the relations RD
A′ , where each A′ is a
superset of A. Then, due to (H6), DAϕ ∈ H (r′ , n′ );
hence, by (H2), ϕ ∈ H (r′ , n′ ), as desired.
Now, let ¬DAϕ ∈ H (r, n). By (H5), there exist
r′ ∈ R and n′ ∈ N such that ((r, n), (r′ , n′ )) ∈ RD
and ¬ϕ ∈ H (r′ , n′ ). As RD
A , the claim follows
from the inductive hypothesis.
Suppose that χ = CAϕ. Assume that CAϕ ∈
H (r, n).
By inductive hypothesis,
it suﬃces to
show that if (r′ , n′ ) is A-reachable from (r, n), then
ϕ ∈ H (r′ , n′ ).
If (r, n) = (r′ , n′ ) the claim fol-
lows from (H2).
So, suppose for some m ≥ 1,
there exists a sequence of points (r, n) = (r0 , n0 ), . . . ,
(rm−1 , nm−1 ), (rm , nm) = (r′ , n′ ) such that, for ev-
ery 0 ≤ i < m,
there exists ai ∈ A such
that ((ri , ni ), (ri+1 , ni+1 )) ∈ R′D
ai . Then,
for ev-
ery 0 ≤ i < m, there exists ai ∈ A such that
((ri , ni ), (ri+1 , ni+1 )) ∈ Rai . We can then show by
induction on i, using (H2) and (H6), that CAϕ ∈
H (ri , ni ) holds for every 0 ≤< m; hence, Dai (ϕ ∧
CAϕ) ∈ H (ri , ni ). Therefore, ϕ ∈ H (ri+1 , ni+1 )
by (H2) and (H6). By taking i = m − 1 we obtain
ϕ ∈ H (r′ , n′ ), as required.
Now, assume ¬CAϕ ∈ H (r, n). Then, the claim
follows from (H7) and the inductive hypothesis, since
RC
A .
Suppose that χ = ϕ U ψ .
If ϕ U ψ ∈ H (r, n),
then the
conclusion immediately follows
from
(H4) and the inductive hypothesis.
Suppose, on
the other hand, that ¬(ϕ U ψ) ∈ H (r, n). Then,
by (H2), ¬ψ , ¬ϕ ∈ H (r, n) or ¬ψ , ❣¬(ϕ U ψ)
∈ H (r, n). In case former case, the inductive hypoth-
esis immediately gives us the desired result. In the
latter, inductive hypothesis gives us M, (r, n) 1 ψ
and (H3) gives us ¬(ϕ U ψ) ∈ H (r, n + 1). Now
the argument can be repeated. Ultimately, us-
ing inductive hypothesis, we either get a ﬁnite
path (r, n), . . . , (r, i) such that M, (r, i) 1 ϕ and
M, (r, j ) 1 ψ holds for all n ≤ j ≤ i, or we get an in-
ﬁnite path (r, n), (r, n + 1), . . . such that M, (r, i) 1 ψ
for all i ≥ n. In either case, M, (r, n) 1 ψ U ψ .

A ⊆ R′C

A

✷

To show that satisﬁability of a formula in a pseudo-

Proof.
We will
only
consider
the
syn-
chronous case, as it requires extra care.
Sup-
pose
that
θ
is
satisﬁed in
a
synchronous
pseudo-TEM M =
(Σ, S, R, {RD
{RC
A }A∈P + (Σ) , AP, L) at a point (r, n). To build
a synchronous forest-like TEM M′ satisfying θ, we
use the modiﬁed tree-unraveling technique. First,

A }A∈P + (Σ) ,

for satisﬁability in synchronous systems, as this case
requires more care. We then brieﬂy mention how to
modify the procedure for asynchronous case and ar-
gue the the output of both procedures for the same
input formula is the same, implying the equivalence
of two semantics.

4.1 Overview of the tableau proce-
dure

The tableau procedure for testing a formula θ ∈ L
for satisﬁability attempts to construct a non-empty
graph T θ (called tableau ), whose nodes are ﬁnite sub-
sets of L, representing suﬃciently many TEHSs, in
the sense that, if θ is satisﬁable in a TEHS, it is sat-
isﬁable in a one represented by a tableau for θ. The
philosophy underlying our tableau algorithm is essen-
tially the same as the one underpinning the tableau
procedure for LTL from [7], recently adapted to mul-
tiagent epistemic logics in [2]; this philosophy can
be traced back to [5]. To make the present paper
self-contained, we outline the basic ideas behind our
tableau algorithm in line with those references. The
particulars of the tableaux presented here, however,
are speciﬁc to CMATEL(CD+LT).
Usually, tableaux work by decomposing the input
formula into simpler formulae. In the classical propo-

A = T a∈AR′D
a

ρi to ρi+1 , which in view of (‡) is unique. Let us ob-
tain a path P ′ from ρ to τ by replacing in ρ every link
(ρi , Ai , ρi+1 ) by the corresponding non-redundant Ai -
primitive path from ρi to ρi+1 . Call P ′ an expansion
of P . In view of (‡), every path has a unique expan-
sion. Now, it is easy to see that P is a reduction of P ′ .
Since the reduction of a given path is unique, too, it
follows that there exists a one-to-one correspondence
between reduced paths and non-redundant primitive
paths in M′ .
We now prove that R′D
for every
A ∈ P +(Σ), and hence M′ is a TEM. The left to right
inclusion is immediate, as M′ is pseudo-TEM. For
the other direction, assume that ((r, n), (r′ , n)) ∈ R′D
holds for every a ∈ A. Then, for every a ∈ A, there
exists a path, and therefore a maximal reduced path,
from (r, n) to (r′ , n) along relations R′D
A′ such that
a ∈ A′ . As M′ is forest-like, there is only one maxi-
mal reduced path from (r, n) to (r′ , n). Therefore, the
relations RD
A′ linking (r, n) to (r′ , n) along this path
are such that A ⊆ A′ for every A′ . Then, by the
downwards closure condition, there is a path from
(r, n) to (r′ , n) along the relation R′D
A and, hence,
((r, n), (r′ , n)) ∈ R′D
A , as desired.
Finally,
it remains to prove that M′ satisﬁes
θ. First, notice that (ρ, τ ) ∈ R′
A iﬀ there exists
an A-primitive path from ρ to τ . Hence, as every
RA is an equivalence relation, if (ρ, τ ) ∈ R′
A , then
(l(ρ), l(τ )) ∈ R′
A . It is now straightforward to check
that the relation Z = { (ρ, l(ρ) | ρ ∈ S ′ } is a bisim-
ulation between M′ and M. Since (x, l(x)) ∈ Z , it
follows that M′ , x (cid:13) θ, and we are done.

a

✷

Theorem 3.10 Let θ ∈ L. Then, θ is satisﬁable in
a TEM iﬀ there exists a TEHS satisfying θ.

Proof. Immediate from Lemmas 3.4, 3.5 and 3.9. ✷

4 Tableaux for
CMATEL(CD + LT)

In the present section, we describe the tableau pro-
cedure for testing formulae of CMATEL(CD+LT)

2. if ∆[n] contains no formulae ❣ϕ, add ❣⊤ to it;
3. for each so obtained state ∆[n] , put Γ[n] =⇒

∆[n] ;

4. if, however, the pretableau already contains a
state ∆′[m] that coincides with ∆[n] , do not cre-
ate another copy of ∆′[m] , but only put Γ[n] =⇒

∆′[m] .

We denote by states(Γ[n] ) the set of states { ∆ |
Γ[n] =⇒ ∆ }. Note that we remove patently incon-

2. if there is a state ∆ in P θ with ∆
−→ Γ, then
for every state ∆′ ∈ states(Γ), put ∆
−→ ∆′ ;
3. if there is a state ∆ in P θ with ∆ −→ Γ, then
for every state ∆′ ∈ states(Γ), put ∆ −→ ∆′ .

χ

χ

The resulting graph, denoted T θ
0 , is called the ini-
tial tableau.

4.4 State elimination phase

During this phase we remove from T θ
0 states that are
not satisﬁable in a TEHS. There are two reasons why
a state ∆ of T θ
0 can turn out to be unsatisﬁable: ei-
ther satisﬁability of ∆ requires satisﬁability of some
other (epistemic or temporal) successor states which
are unsatisﬁable, or ∆ contains an eventuality that
is not realized in the tableau. Accordingly, we have
three elimination rules (as two diﬀerent rules deal
with epistemic and temporal successors): (E1E),
(E1T), and (E2).
Formally, the state elimination phase is divided
into stages; we start at stage 0 with T θ
0 ; at stage
n + 1 we remove from the tableau T θ
n obtained at
the previous stage exactly one state, by applying one
of the elimination rules, thus obtaining the tableau
T θ
n+1 . We state the rules below, where S θ
m denotes
the set of states of T θ
m .
(E1E) If ∆ ∈ S θ
n contains a formula χ = ¬DAϕ
−→ ∆′ does not hold for any ∆′ ∈ S θ
and ∆
n , obtain
T θ
n+1 by eliminating ∆ from T θ
n .
(E1T) If If ∆ ∈ S θ
n and ∆ −→ ∆′ does not hold
for any ∆′ ∈ S θ
n , obtain T θ
n+1 by eliminating ∆ from
T θ
n .
For the third elimination rule, we need the concept
of eventuality realization. We say that the eventu-
ality ¬CAϕ is realized at ∆ in T θ
n if there exists a
ﬁnite path ∆ = ∆0 , ∆1 , . . . , ∆m (where m ≥ 0) such
that ¬ϕ ∈ ∆m and for every 0 ≤ i < m there ex-
ist χi = DB ψi such that B ⊆ A and ∆i
Analogously, we say that the eventuality ϕ U ψ is re-
alized at ∆ in T θ
n if there exists a ﬁnite path ∆ =
∆0 , ∆1 , . . . , ∆m (where m ≥ 0) such that ψ ∈ ∆m ,
and for every 0 ≤ i < m, both ∆i −→ ∆i+1 and
ϕ ∈ ∆i hold.

χi−→ ∆i+1 .

χ

n

DB ψ

(E2) If ∆ ∈ S θ
n contains a (temporal or epistemic)
eventuality ξ that is not realized at ∆ in T θ
n , then
obtain T θ
n+1 by removing ∆ from T θ
n .
We check for realization of eventualities by run-
ning the following iterative procedure that eventually
marks all states that realize a given eventuality ξ in
T θ
n . If ξ = ¬CAϕ, then initially, we mark all ∆ ∈ S θ
such that ¬ϕ ∈ ∆. Then, we repeat the following
procedure until no more states get marked: for every
still unmarked ∆ ∈ S θ
n , mark ∆ if there is at least
one ∆′ such that ∆
−→ ∆′ for some B ⊆ A and ∆′ is
marked. The procedure for eventualities of the form
ϕ U ψ is analogous.
We have so far described individual rules and their
implementation; to describe the state elimination
phase as a whole, we need to specify the order of
their application. We need to be careful, as hav-
ing applied (E2), we could have removed all the
states accessible from some ∆ either along the ar-
rows marked with an epistemic formula χ or along un-
marked arrows −→; hence, we need to reapply (E1E)
and (E1T) to the resultant tableau to remove such
∆’s. Conversely, having applied (E1E) and (E1T),
we could have thrown away some states that were
needed for realizing certain eventualities; hence, we
need to reapply (E2). Therefore, we need to apply
(E2), (E1E), and (E1T) in a dovetailed sequence
that cycles through all the eventualities. More pre-
cisely, we arrange all eventualities occurring in T θ
0 in
a list ξ1 , . . . , ξm . Then, we proceed in cycles. Each
cycle consists of alternatingly applying (E2) to the
pending eventuality (starting with ξ1 ), and then ap-
plying (E1E) and (E1T) to the resulting tableau,
until all the eventualities have been dealt with, i.e.,
we reached ξm . These cycles are repeated until no
state is removed in a whole cycle. Then, the state
elimination phase is over.
The graph produced at the end of the state elimi-
nation phase is called the ﬁnal tableau for θ, denoted
by T θ and its set of states is denoted by S θ .

Deﬁnition 4.1 The ﬁnal tableau T θ is open if θ ∈
∆ for some ∆ ∈ S θ ; otherwise, T θ is closed.

moreover, provides suﬃcient information for produc-
ing a ﬁnite pseudo-model satisfying θ; that construc-
tion is sketched in Section 5.

5 Soundness, completeness,
and complexity

Example 1 In this example, we show how our pro-
cedure works on the formula ¬C{a,b}p U D{a,c}p. Be-
low is the complete pretableau for this formula.

Γ[0]
0

■
❅❅❘
❄

✒
  ✠

∆[0]
1

∆[0]
2

∆[0]
3

❄χ1
❄χ2
✛χ1 ✲χ2

Γ[0]
1

Γ[0]
2

✒
  ✠

■
❅❅❘
❄

χ1

χ1

∆[0]
4

∆[0]
5

■
  ✠ ❄❅❅❘
■

χ2

χ2

∆[0]
8

∆[0]
6

∆[0]
7

❄
  ✠
✛
■

Γ[1]
3

❅❅❘
✲
✲

❄

∆[0]
9

χ1 = ¬Da (p ∧ C{a,b}p); χ2 = ¬Db (p ∧ C{a,b} p);
Γ0 = {¬C{a,b}p U D{a,c}p = θ};

∆1 = {θ , ¬C{a,b}p, ❡θ , χ1 }; ∆2 = {D{a,c} p, p, ❡⊤};
∆3 = {θ , ¬C{a,b}p, ❡θ , χ2 }; Γ1 = {χ1 , ¬(p ∧ C{a,c}p)};
Γ2 = {χ2 , ¬(p ∧ C{a,c}p)}; ∆4 = {χ1 , ¬p, ❡⊤};
∆5 = {χ1 , ¬C{a,b}p, ❡⊤}; ∆6 = {χ1 , ¬C{a,b}p, χ2 , ❡⊤};
∆7 = {χ2 , ¬C{a,c}p, ❡⊤}; ∆8 = {χ2 , ¬p, ❡⊤};

Γ3 = {⊤}; ∆9 = {⊤, ❡⊤}.

The initial tableau is obtained by removing al l
prestates (the Γs) and redirecting the arrows (i.e, ∆1
wil l be connected by unmarked single arrows to itself,
∆2 , and ∆3 ). It is easy to check that no states get re-
moved during the state elimination stage; hence, the
tableau is open and θ is satisﬁable.

We now brieﬂy mention how to modify the above
procedure for the asynchronous case. The only diﬀer-
ence occurs in the (DR) rule: we now longer require
that prestates produced during the application of this
rule to a given state ∆[n] should have the same time
stamp as ∆ (namely, n). A brief analysis of the pro-
cedure shows that this modiﬁcation does not change
the outcome of the procedure for a given formula.
This, in particular, implies that the satisﬁability-wise
equivalence of synchronous and asynchronous seman-
tics.

The soundness of a tableau procedure amounts to
claiming that if the input formula θ is satisﬁable, then
the tableau for θ is open. To establish soundness of
the overall procedure, we use a series of lemmas show-
ing that every rule by itself is sound; the soundness
of the overall procedure is then an easy consequence.
The proofs of the following three lemmas are straight-
forward.

Lemma 5.1 Let Γ be a prestate of P θ such that
M, (r, n) (cid:13) Γ for some TEM M and point (r, n).
Then, M, (r, n) (cid:13) ∆ holds for at least one ∆ ∈
states(Γ).

Lemma 5.2 Let ∆ ∈ S θ
m , for m ≥ 0, be such that
M, (r, n) (cid:13) ∆ for some TEM M and point (r, n), and
let ¬DAϕ ∈ ∆. Then, there exists a point (r′ , n′ ) ∈
M such that ((r, n), (r′ , n′ )) ∈ RD
A and M, (r′ , n′ ) (cid:13)
∆′ where ∆′ = {¬ϕ} ∪ S A′⊆A{ DA′ ψ | DA′ ψ ∈
∆ } ∪ S A′⊆A{ ¬DA′ ψ | ¬DA′ ψ ∈ ∆ }.

Lemma 5.3 Let ∆ ∈ S θ
m , for m ≥ 0, be such that
M, (r, n) (cid:13) ∆ for some TEM M and a point (r, n).
Then, M, (r, n + 1) (cid:13) ❣(∆) where ❣(∆) = { ϕ |
❣ϕ ∈ ∆ }.

Lemma 5.4 Let ∆ ∈ S θ
m , for m ≥ 0, be such that
M, (r, n) (cid:13) ∆ for some TEM M and a point (r, n),
and let ¬CAϕ ∈ ∆. Then, ¬CAϕ is realized at ∆ in
T θ
m .

Proof idea. Since ¬CAϕ is true at s, there is a path
in M from s leading to a state satisfying ¬ϕ. Since
the tableau performs exhaustive search, a chain of
tableau states corresponding to those states in the
model will be produced.

✷

The next lemma is proved likewise.

Lemma 5.5 Let ∆ ∈ S θ
m , for m ≥ 0, be such that
M, (r, n) (cid:13) ∆ for some TEM M and a point (r, n),
and let ϕ U ψ ∈ ∆. Then, ϕ U ψ is realized at ∆ in
T θ
m .

11

Theorem 5.6 If θ ∈ L is satisﬁable in a TEM, then
T θ is open.

Proof sketch. Using the preceding lemmas, we
show by induction on the number of stages in the
state elimination phase that no satisﬁable state can
be eliminated due to any of the elimination rules.
The claim then follows from Lemma 5.1.

✷

The completeness of a tableau procedure means
that if the tableau for a formula θ is open, then θ
is satisﬁable in a TEM. In view of Theorem 3.10, it
suﬃces to show that an open tableau for θ can be
turned into a TEHS for θ.

Lemma 5.7 If T θ is open, then a (synchronous)
TEHS for θ exists.

Proof sketch. The TEHS H for θ is built by in-
duction on the temporal levels, in order to take care
of synchrony. The main concern is to ensure that
all eventualities in the resultant structure are real-
ized (all other properties of Hintikka structures eas-
ily transfer from an open tableau). We alternate be-
tween realizing epistemic eventualities (formulae of
the form ¬CAϕ) and temporal eventualities (formu-
lae of the form ϕ U ψ).
We start by building the 0th level of our prospec-
tive Hintikka structure from the level 0 of the open
tableau. For each state ∆[0] on this level, if ∆[0]
does not contain any epistemic eventualities, we de-
ﬁne epistemic component for ∆[0] to be ∆[0] with
exactly one successor reachable by ¬DAψ , for each
¬DAψ ∈ ∆[0] ; if, on the other hand, ¬CAϕ ∈ ∆[0] ,
then such a component is a tree obtained from a path
in the tableau realizing ¬CAϕ at ∆[0] by giving each

[4] J. Y. Halpern and M. Y. Vardi. The complexity
of reasoning about knowledge and time I: Lower
bounds. Journal of Computer and System Sci-
ences, 38(1):195–237, 1989.

[5] V. R. Pratt. A near optimal method for reasoning
about action. Journal of Computer and System
Sciences, 20:231–254, 1980.

[6] W. van der Hoek and J.-J. C. Meyer. Making
some issues of implicit knowledge explicit.
In-
ternational Journal of Foundations of Computer
Science, 3(2):193–224, 1992.

[7] P. Wolper. The tableau method for temporal
logic: an overview. Logique et Analyse, 28(110–
111):119–136, 1985.

6 Concluding remarks

We developed an incremental-tableau based de-
cision procedure for the full coalitional multia-
gent temporal-epistemic logic of linear time CMA-
TEL(CD+LT). In this case, there is no essential
interaction between the temporal and the epistemic
dimensions, which makes the tableau construction
easier to build and less expensive to run, by reduc-
ing it to a combination of tableaux for LTL and
for the (epistemic) logic CMAEL(CD) developed in
[2]. We are convinced that our procedure is—besides
being rather intuitive—practically much more eﬃ-
cient than the top-down tableaux, e.g., developed
for a fragment of our logic in [3], and hence better
suited to both manual and automated execution. It
is also easily amenable to modiﬁcations suited to rea-
soning about subclasses of distributed systems, e.g.,
those with a unique initial state. The branching time
case, which will be considered in a sequel to this
paper, is essentially a combination of tableaux for
CTL with those for CMAEL(CD). On the other
hand, the development of tableau-based procedures
for those logics from [4] whose satisﬁability problem
has EXPSPACE lower bound is an open challenge.

References

[1] R. Fagin, J. Y. Halpern, and M. Y. Vardi. What
can machines know? On the properties of knowl-
edge in distributed systems. Journal of the ACM,
39(2):328–376, April 1992.

[2] V. Goranko and D. Shkatov. Tableau-based pro-
cedure for deciding satisﬁability in the full coali-
tional multiagent epistemic logic.
In S. Arte-
mov and A. Nerode, editors, Proc. of the Sym-
posium on Logical Foundations of Computer Sci-
ence (LFCS 2009), volume 5407 of Lecture Notes
in Computer Science, pages 197–213. Springer-
Verlag, 2009.

[3] J. Y. Halpern and Y. Moses. A guide to complete-
ness and complexity for modal logics of knowl-
edge and belief. Artiﬁcial Intel ligence, 54:319–
379, 1992.

13

